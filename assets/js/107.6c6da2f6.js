(window.webpackJsonp=window.webpackJsonp||[]).push([[107],{547:function(a,t,s){"use strict";s.r(t);var e=s(7),_=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"taos-sql"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#taos-sql"}},[a._v("#")]),a._v(" TAOS SQL")]),a._v(" "),s("p",[a._v("本文档说明TAOS SQL支持的语法规则、主要查询功能、支持的SQL查询函数，以及常用技巧等内容。阅读本文档需要读者具有基本的SQL语言的基础。")]),a._v(" "),s("p",[a._v("TAOS SQL是用户对TDengine进行数据写入和查询的主要工具。TAOS SQL为了便于用户快速上手，在一定程度上提供类似于标准SQL类似的风格和模式。严格意义上，TAOS SQL并不是也不试图提供SQL标准的语法。此外，由于TDengine针对的时序性结构化数据不提供删除功能，因此在TAO SQL中不提供数据删除的相关功能。")]),a._v(" "),s("p",[a._v("本章节SQL语法遵循如下约定：")]),a._v(" "),s("ul",[s("li",[a._v("< > 里的内容是用户需要输入的，但不要输入<>本身")]),a._v(" "),s("li",[a._v("[ ]表示内容为可选项，但不能输入[]本身")]),a._v(" "),s("li",[a._v("| 表示多选一，选择其中一个即可，但不能输入|本身")]),a._v(" "),s("li",[a._v("… 表示前面的项可重复多个")])]),a._v(" "),s("p",[a._v("为更好地说明SQL语法的规则及其特点，本文假设存在一个数据集。以智能电表(meters)为例，假设每个智能电表采集电流、电压、相位三个量。其建模如下：")]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("taos> DESCRIBE meters;\n             Field              |        Type        |   Length    |    Note    |\n=================================================================================\n ts                             | TIMESTAMP          |           8 |            |\n current                        | FLOAT              |           4 |            |\n voltage                        | INT                |           4 |            |\n phase                          | FLOAT              |           4 |            |\n location                       | BINARY             |          64 | TAG        |\n groupid                        | INT                |           4 | TAG        |\n")])])]),s("p",[a._v("数据集包含4个智能电表的数据，按照TDengine的建模规则，对应4个子表，其名称分别是 d1001, d1002, d1003, d1004。")]),a._v(" "),s("h2",{attrs:{id:"支持的数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#支持的数据类型"}},[a._v("#")]),a._v(" "),s("a",{staticClass:"anchor",attrs:{id:"data-type"}}),a._v("支持的数据类型")]),a._v(" "),s("p",[a._v("使用TDengine，最重要的是时间戳。创建并插入记录、查询历史记录的时候，均需要指定时间戳。时间戳有如下规则：")]),a._v(" "),s("ul",[s("li",[a._v("时间格式为"),s("code",[a._v("YYYY-MM-DD HH:mm:ss.MS")]),a._v(", 默认时间分辨率为毫秒。比如："),s("code",[a._v("2017-08-12 18:25:58.128")])]),a._v(" "),s("li",[a._v("内部函数now是服务器的当前时间")]),a._v(" "),s("li",[a._v("插入记录时，如果时间戳为now，插入数据时使用服务器当前时间")]),a._v(" "),s("li",[a._v("Epoch Time: 时间戳也可以是一个长整数，表示从1970-01-01 08:00:00.000开始的毫秒数")]),a._v(" "),s("li",[a._v("时间可以加减，比如 now-2h，表明查询时刻向前推2个小时(最近2小时)。 数字后面的时间单位可以是 a(毫秒)、s(秒)、 m(分)、h(小时)、d(天)、w(周)。 比如select * from t1 where ts > now-2w and ts <= now-1w, 表示查询两周前整整一周的数据。 在指定降频操作(down sampling)的时间窗口(interval)时，时间单位还可以使用 n(自然月) 和 y(自然年)。")])]),a._v(" "),s("p",[a._v("TDengine缺省的时间戳是毫秒精度，但通过修改配置参数enableMicrosecond就可支持微秒。")]),a._v(" "),s("p",[a._v("在TDengine中，普通表的数据模型中可使用以下10种数据类型。")]),a._v(" "),s("table",[s("thead",[s("tr",[s("th"),a._v(" "),s("th",{staticStyle:{"text-align":"center"}},[a._v("类型")]),a._v(" "),s("th",[a._v("Bytes")]),a._v(" "),s("th",[a._v("说明")])])]),a._v(" "),s("tbody",[s("tr",[s("td",[a._v("1")]),a._v(" "),s("td",{staticStyle:{"text-align":"center"}},[a._v("TIMESTAMP")]),a._v(" "),s("td",[a._v("8")]),a._v(" "),s("td",[a._v("时间戳。缺省精度毫秒，可支持微秒。从格林威治时间 1970-01-01 00:00:00.000 (UTC/GMT) 开始，计时不能早于该时间。")])]),a._v(" "),s("tr",[s("td",[a._v("2")]),a._v(" "),s("td",{staticStyle:{"text-align":"center"}},[a._v("INT")]),a._v(" "),s("td",[a._v("4")]),a._v(" "),s("td",[a._v("整型，范围 [-2^31+1,   2^31-1], -2^31用作Null")])]),a._v(" "),s("tr",[s("td",[a._v("3")]),a._v(" "),s("td",{staticStyle:{"text-align":"center"}},[a._v("BIGINT")]),a._v(" "),s("td",[a._v("8")]),a._v(" "),s("td",[a._v("长整型，范围 [-2^63+1,   2^63-1], -2^63用于NULL")])]),a._v(" "),s("tr",[s("td",[a._v("4")]),a._v(" "),s("td",{staticStyle:{"text-align":"center"}},[a._v("FLOAT")]),a._v(" "),s("td",[a._v("4")]),a._v(" "),s("td",[a._v("浮点型，有效位数6-7，范围 [-3.4E38, 3.4E38]")])]),a._v(" "),s("tr",[s("td",[a._v("5")]),a._v(" "),s("td",{staticStyle:{"text-align":"center"}},[a._v("DOUBLE")]),a._v(" "),s("td",[a._v("8")]),a._v(" "),s("td",[a._v("双精度浮点型，有效位数15-16，范围 [-1.7E308,   1.7E308]")])]),a._v(" "),s("tr",[s("td",[a._v("6")]),a._v(" "),s("td",{staticStyle:{"text-align":"center"}},[a._v("BINARY")]),a._v(" "),s("td",[a._v("自定义")]),a._v(" "),s("td",[a._v("用于记录字符串，理论上，最长可以有16374字节，但由于每行数据最多16K字节，实际上限一般小于理论值。 binary仅支持字符串输入，字符串两端使用单引号引用，否则英文全部自动转化为小写。使用时须指定大小，如binary(20)定义了最长为20个字符的字符串，每个字符占1byte的存储空间。如果用户字符串超出20字节将会报错。对于字符串内的单引号，可以用转义字符反斜线加单引号来表示， 即 "),s("strong",[a._v("\\’")]),a._v("。")])]),a._v(" "),s("tr",[s("td",[a._v("7")]),a._v(" "),s("td",{staticStyle:{"text-align":"center"}},[a._v("SMALLINT")]),a._v(" "),s("td",[a._v("2")]),a._v(" "),s("td",[a._v("短整型， 范围 [-32767, 32767], -32768用于NULL")])]),a._v(" "),s("tr",[s("td",[a._v("8")]),a._v(" "),s("td",{staticStyle:{"text-align":"center"}},[a._v("TINYINT")]),a._v(" "),s("td",[a._v("1")]),a._v(" "),s("td",[a._v("单字节整型，范围 [-127, 127], -128用于NULL")])]),a._v(" "),s("tr",[s("td",[a._v("9")]),a._v(" "),s("td",{staticStyle:{"text-align":"center"}},[a._v("BOOL")]),a._v(" "),s("td",[a._v("1")]),a._v(" "),s("td",[a._v("布尔型，{true,   false}")])]),a._v(" "),s("tr",[s("td",[a._v("10")]),a._v(" "),s("td",{staticStyle:{"text-align":"center"}},[a._v("NCHAR")]),a._v(" "),s("td",[a._v("自定义")]),a._v(" "),s("td",[a._v("用于记录非ASCII字符串，如中文字符。每个nchar字符占用4bytes的存储空间。字符串两端使用单引号引用，字符串内的单引号需用转义字符 "),s("strong",[a._v("\\’")]),a._v("。nchar使用时须指定字符串大小，类型为nchar(10)的列表示此列的字符串最多存储10个nchar字符，会固定占用40bytes的空间。如用户字符串长度超出声明长度，则将会报错。")])])])]),a._v(" "),s("p",[s("strong",[a._v("Tips")]),a._v(": TDengine对SQL语句中的英文字符不区分大小写，自动转化为小写执行。因此用户大小写敏感的字符串及密码，需要使用单引号将字符串引起来。")]),a._v(" "),s("h2",{attrs:{id:"数据库管理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据库管理"}},[a._v("#")]),a._v(" "),s("a",{staticClass:"anchor",attrs:{id:"management"}}),a._v("数据库管理")]),a._v(" "),s("ul",[s("li",[s("p",[s("strong",[a._v("创建数据库")])]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("CREATE DATABASE [IF NOT EXISTS] db_name [KEEP keep] [UPDATE 1];\n")])])]),s("p",[a._v("说明：")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("KEEP是该数据库的数据保留多长天数，缺省是3650天(10年)，数据库会自动删除超过时限的数据；")])]),a._v(" "),s("li",[s("p",[a._v("UPDATE 标志数据库支持更新相同时间戳数据；")])]),a._v(" "),s("li",[s("p",[a._v("数据库名最大长度为33；")])]),a._v(" "),s("li",[s("p",[a._v("一条SQL 语句的最大长度为65480个字符；")])]),a._v(" "),s("li",[s("p",[a._v("数据库还有更多与存储相关的配置参数，请参见系统管理。")])])])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("显示系统当前参数")])]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("SHOW VARIABLES;\n")])])])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("使用数据库")])]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("USE db_name;\n")])])]),s("p",[a._v("使用/切换数据库")])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("删除数据库")])]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("DROP DATABASE [IF EXISTS] db_name;\n")])])]),s("p",[a._v("删除数据库。所包含的全部数据表将被删除，谨慎使用")])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("修改数据库参数")])]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("ALTER DATABASE db_name COMP 2;\n")])])]),s("p",[a._v("COMP参数是指修改数据库文件压缩标志位，取值范围为[0, 2]. 0表示不压缩，1表示一阶段压缩，2表示两阶段压缩。")]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("ALTER DATABASE db_name REPLICA 2;\n")])])]),s("p",[a._v("REPLICA参数是指修改数据库副本数，取值范围[1, 3]。在集群中使用，副本数必须小于或等于dnode的数目。")]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("ALTER DATABASE db_name KEEP 365;\n")])])]),s("p",[a._v("KEEP参数是指修改数据文件保存的天数，缺省值为3650，取值范围[days, 365000]，必须大于或等于days参数值。")]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("ALTER DATABASE db_name QUORUM 2;\n")])])]),s("p",[a._v("QUORUM参数是指数据写入成功所需要的确认数。取值范围[1, 3]。对于异步复制，quorum设为1，具有master角色的虚拟节点自己确认即可。对于同步复制，需要至少大于等于2。原则上，Quorum >=1 并且 Quorum <= replica(副本数)，这个参数在启动一个同步模块实例时需要提供。")]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("ALTER DATABASE db_name BLOCKS 100;\n")])])]),s("p",[a._v("BLOCKS参数是每个VNODE (TSDB) 中有多少cache大小的内存块，因此一个VNODE的用的内存大小粗略为（cache * blocks）。取值范围[3, 1000]。")]),a._v(" "),s("p",[s("strong",[a._v("Tips")]),a._v(": 以上所有参数修改后都可以用show databases来确认是否修改成功。")])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("显示系统所有数据库")])]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("SHOW DATABASES;\n")])])])])]),a._v(" "),s("h2",{attrs:{id:"表管理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#表管理"}},[a._v("#")]),a._v(" "),s("a",{staticClass:"anchor",attrs:{id:"table"}}),a._v("表管理")]),a._v(" "),s("ul",[s("li",[s("p",[s("strong",[a._v("创建数据表")])]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("CREATE TABLE [IF NOT EXISTS] tb_name (timestamp_field_name TIMESTAMP, field1_name data_type1 [, field2_name data_type2 ...]);\n")])])]),s("p",[a._v("说明：")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("表的第一个字段必须是TIMESTAMP，并且系统自动将其设为主键；")])]),a._v(" "),s("li",[s("p",[a._v("表名最大长度为192；")])]),a._v(" "),s("li",[s("p",[a._v("表的每行长度不能超过16k个字符;")])]),a._v(" "),s("li",[s("p",[a._v("子表名只能由字母、数字和下划线组成，且不能以数字开头")])]),a._v(" "),s("li",[s("p",[a._v("使用数据类型binary或nchar，需指定其最长的字节数，如binary(20)，表示20字节；")])])])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("以超级表为模板创建数据表")])]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("CREATE TABLE [IF NOT EXISTS] tb_name USING stb_name TAGS (tag_value1, ...);\n")])])]),s("p",[a._v("以指定的超级表为模板，指定 tags 的值来创建数据表。")])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("以超级表为模板创建数据表，并指定具体的 tags 列")])]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("CREATE TABLE [IF NOT EXISTS] tb_name USING stb_name (tag_name1, ...) TAGS (tag_value1, ...);\n")])])]),s("p",[a._v("以指定的超级表为模板，指定一部分 tags 列的值来创建数据表。（没被指定的 tags 列会设为空值。）"),s("br"),a._v("\n说明：从 2.0.17 版本开始支持这种方式。在之前的版本中，不允许指定 tags 列，而必须显式给出所有 tags 列的取值。")])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("批量创建数据表")])]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("CREATE TABLE [IF NOT EXISTS] tb_name1 USING stb_name TAGS (tag_value1, ...) tb_name2 USING stb_name TAGS (tag_value2, ...) ...;\n")])])]),s("p",[a._v("以更快的速度批量创建大量数据表。（服务器端 2.0.14 及以上版本）")]),a._v(" "),s("p",[a._v("说明：")]),a._v(" "),s("p",[a._v("1）批量建表方式要求数据表必须以超级表为模板。")]),a._v(" "),s("p",[a._v("2）在不超出 SQL 语句长度限制的前提下，单条语句中的建表数量建议控制在 1000～3000 之间，将会获得比较理想的建表速度。")])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("删除数据表")])]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("DROP TABLE [IF EXISTS] tb_name;\n")])])])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("显示当前数据库下的所有数据表信息")])]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("SHOW TABLES [LIKE tb_name_wildcar];\n")])])]),s("p",[a._v("显示当前数据库下的所有数据表信息。")]),a._v(" "),s("p",[a._v("说明：可在like中使用通配符进行名称的匹配，这一通配符字符串最长不能超过24字节。")]),a._v(" "),s("p",[a._v("通配符匹配：1）’%’ (百分号)匹配0到任意个字符；2）’_’下划线匹配一个字符。")])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("在线修改显示字符宽度")])]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("SET MAX_BINARY_DISPLAY_WIDTH <nn>;\n")])])])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("获取表的结构信息")])]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("DESCRIBE tb_name;\n")])])])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("表增加列")])]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("ALTER TABLE tb_name ADD COLUMN field_name data_type;\n")])])]),s("p",[a._v("说明：")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("列的最大个数为1024，最小个数为2；")])]),a._v(" "),s("li",[s("p",[a._v("列名最大长度为64；")])])])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("表删除列")])]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("ALTER TABLE tb_name DROP COLUMN field_name; \n")])])]),s("p",[a._v("如果表是通过"),s("RouterLink",{attrs:{to:"/zh/dataanalysis/tdengine/super-table/"}},[a._v("超级表")]),a._v("创建，更改表结构的操作只能对超级表进行。同时针对超级表的结构更改对所有通过该结构创建的表生效。对于不是通过超级表创建的表，可以直接修改表结构")],1)])]),a._v(" "),s("h2",{attrs:{id:"超级表stable管理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#超级表stable管理"}},[a._v("#")]),a._v(" "),s("a",{staticClass:"anchor",attrs:{id:"super-table"}}),a._v("超级表STable管理")]),a._v(" "),s("p",[a._v("注意：在 2.0.15 以前的版本中，并不支持 STABLE 保留字，而是写作 TABLE。也即，在本节后文的指令说明中，CREATE、DROP、ALTER 三个指令在老版本中保留字需写作 TABLE 而不是 STABLE。")]),a._v(" "),s("ul",[s("li",[s("p",[s("strong",[a._v("创建超级表")])]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("CREATE STABLE [IF NOT EXISTS] stb_name (timestamp_field_name TIMESTAMP, field1_name data_type1 [, field2_name data_type2 ...]) TAGS (tag1_name tag_type1, tag2_name tag_type2 [, tag3_name tag_type3]);\n")])])]),s("p",[a._v("创建 STable，与创建表的 SQL 语法相似，但需指定 TAGS 字段的名称和类型")]),a._v(" "),s("p",[a._v("说明：")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("TAGS 列的数据类型不能是 timestamp 类型；")])]),a._v(" "),s("li",[s("p",[a._v("TAGS 列名不能与其他列名相同；")])]),a._v(" "),s("li",[s("p",[a._v("TAGS 列名不能为预留关键字；")])]),a._v(" "),s("li",[s("p",[a._v("TAGS 最多允许128个，至少1个，总长度不超过16k个字符。")])])])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("删除超级表")])]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("DROP STABLE [IF EXISTS] stb_name;\n")])])]),s("p",[a._v("删除 STable 会自动删除通过 STable 创建的子表。")])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("显示当前数据库下的所有超级表信息")])]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("SHOW STABLES [LIKE tb_name_wildcar];\n")])])]),s("p",[a._v("查看数据库内全部 STable，及其相关信息，包括 STable 的名称、创建时间、列数量、标签（TAG）数量、通过该 STable 建表的数量。")])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("获取超级表的结构信息")])]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("DESCRIBE stb_name;\n")])])])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("超级表增加列")])]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("ALTER STABLE stb_name ADD COLUMN field_name data_type;\n")])])])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("超级表删除列")])]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("ALTER STABLE stb_name DROP COLUMN field_name; \n")])])])])]),a._v(" "),s("h2",{attrs:{id:"超级表-stable-中-tag-管理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#超级表-stable-中-tag-管理"}},[a._v("#")]),a._v(" "),s("a",{staticClass:"anchor",attrs:{id:"tags"}}),a._v("超级表 STable 中 TAG 管理")]),a._v(" "),s("ul",[s("li",[s("p",[s("strong",[a._v("添加标签")])]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("ALTER STABLE stb_name ADD TAG new_tag_name tag_type;\n")])])]),s("p",[a._v("为 STable 增加一个新的标签，并指定新标签的类型。标签总数不能超过 128 个，总长度不超过 16k 个字符。")])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("删除标签")])]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("ALTER STABLE stb_name DROP TAG tag_name;\n")])])]),s("p",[a._v("删除超级表的一个标签，从超级表删除某个标签后，该超级表下的所有子表也会自动删除该标签。")])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("修改标签名")])]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("ALTER STABLE stb_name CHANGE TAG old_tag_name new_tag_name;\n")])])]),s("p",[a._v("修改超级表的标签名，从超级表修改某个标签名后，该超级表下的所有子表也会自动更新该标签名。")])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("修改子表标签值")])]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("ALTER TABLE tb_name SET TAG tag_name=new_tag_value;\n")])])]),s("p",[a._v("说明：除了更新标签的值的操作是针对子表进行，其他所有的标签操作（添加标签、删除标签等）均只能作用于 STable，不能对单个子表操作。对 STable 添加标签以后，依托于该 STable 建立的所有表将自动增加了一个标签，所有新增标签的默认值都是 NULL。")])])]),a._v(" "),s("h2",{attrs:{id:"数据写入"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据写入"}},[a._v("#")]),a._v(" "),s("a",{staticClass:"anchor",attrs:{id:"insert"}}),a._v("数据写入")]),a._v(" "),s("ul",[s("li",[s("p",[s("strong",[a._v("插入一条记录")])]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("INSERT INTO tb_name VALUES (field_value, ...);\n")])])]),s("p",[a._v("向表tb_name中插入一条记录")])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("插入一条记录，数据对应到指定的列")])]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("INSERT INTO tb_name (field1_name, ...) VALUES (field1_value1, ...);\n")])])]),s("p",[a._v("向表tb_name中插入一条记录，数据对应到指定的列。SQL语句中没有出现的列，数据库将自动填充为NULL。主键（时间戳）不能为NULL。")])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("插入多条记录")])]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("INSERT INTO tb_name VALUES (field1_value1, ...) (field1_value2, ...) ...;\n")])])]),s("p",[a._v("向表tb_name中插入多条记录")])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("按指定的列插入多条记录")])]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("INSERT INTO tb_name (field1_name, ...) VALUES (field1_value1, ...) (field1_value2, ...) ...;\n")])])]),s("p",[a._v("向表tb_name中按指定的列插入多条记录")])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("向多个表插入多条记录")])]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("INSERT INTO tb1_name VALUES (field1_value1, ...) (field1_value2, ...) ...\n            tb2_name VALUES (field1_value1, ...) (field1_value2, ...) ...;\n")])])]),s("p",[a._v("同时向表tb1_name和tb2_name中分别插入多条记录")])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("同时向多个表按列插入多条记录")])]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("INSERT INTO tb1_name (tb1_field1_name, ...) VALUES (field1_value1, ...) (field1_value2, ...) ...\n            tb2_name (tb2_field1_name, ...) VALUES (field1_value1, ...) (field1_value2, ...) ...;\n")])])]),s("p",[a._v("同时向表tb1_name和tb2_name中按列分别插入多条记录")]),a._v(" "),s("p",[a._v("注意：")]),a._v(" "),s("ol",[s("li",[a._v("如果时间戳为0，系统将自动使用服务器当前时间作为该记录的时间戳；")]),a._v(" "),s("li",[a._v("允许插入的最老记录的时间戳，是相对于当前服务器时间，减去配置的keep值（数据保留的天数），允许插入的最新记录的时间戳，是相对于当前服务器时间，加上配置的days值（数据文件存储数据的时间跨度，单位为天）。keep和days都是可以在创建数据库时指定的，缺省值分别是3650天和10天。")])])]),a._v(" "),s("li",[s("p",[s("a",{staticClass:"anchor",attrs:{id:"auto_create_table"}}),s("strong",[a._v("插入记录时自动建表")])]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("INSERT INTO tb_name USING stb_name TAGS (tag_value1, ...) VALUES (field_value1, ...);\n")])])]),s("p",[a._v("如果用户在写数据时并不确定某个表是否存在，此时可以在写入数据时使用自动建表语法来创建不存在的表，若该表已存在则不会建立新表。自动建表时，要求必须以超级表为模板，并写明数据表的 tags 取值。")])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("插入记录时自动建表，并指定具体的 tags 列")])]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("INSERT INTO tb_name USING stb_name (tag_name1, ...) TAGS (tag_value1, ...) VALUES (field_value1, ...);\n")])])]),s("p",[a._v("在自动建表时，可以只是指定部分 tags 列的取值，未被指定的 tags 列将取为空值。")])])]),a._v(" "),s("p",[s("strong",[a._v("历史记录写入")]),a._v("：可使用IMPORT或者INSERT命令，IMPORT的语法，功能与INSERT完全一样。")]),a._v(" "),s("p",[a._v("说明：针对 insert 类型的 SQL 语句，我们采用的流式解析策略，在发现后面的错误之前，前面正确的部分SQL仍会执行。下面的sql中，insert语句是无效的，但是d1001仍会被创建。")]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("taos> CREATE TABLE meters(ts TIMESTAMP, current FLOAT, voltage INT, phase FLOAT) TAGS(location BINARY(30), groupId INT);\nQuery OK, 0 row(s) affected (0.008245s)\n\ntaos> SHOW STABLES;\n              name              |      created_time       | columns |  tags  |   tables    |\n============================================================================================\n meters                         | 2020-08-06 17:50:27.831 |       4 |      2 |           0 |\nQuery OK, 1 row(s) in set (0.001029s)\n\ntaos> SHOW TABLES;\nQuery OK, 0 row(s) in set (0.000946s)\n\ntaos> INSERT INTO d1001 USING meters TAGS('Beijing.Chaoyang', 2);\n\nDB error: invalid SQL: keyword VALUES or FILE required\n\ntaos> SHOW TABLES;\n           table_name           |      created_time       | columns |          stable_name           |\n======================================================================================================\n d1001                          | 2020-08-06 17:52:02.097 |       4 | meters                         |\nQuery OK, 1 row(s) in set (0.001091s)\n")])])]),s("h2",{attrs:{id:"数据查询"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据查询"}},[a._v("#")]),a._v(" "),s("a",{staticClass:"anchor",attrs:{id:"select"}}),a._v("数据查询")]),a._v(" "),s("h3",{attrs:{id:"查询语法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查询语法"}},[a._v("#")]),a._v(" 查询语法：")]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("SELECT select_expr [, select_expr ...]\n    FROM {tb_name_list}\n    [WHERE where_condition]\n    [INTERVAL (interval_val [, interval_offset])]\n    [FILL fill_val]\n    [SLIDING fill_val]\n    [GROUP BY col_list]\n    [ORDER BY col_list { DESC | ASC }]\n    [SLIMIT limit_val [, SOFFSET offset_val]]\n    [LIMIT limit_val [, OFFSET offset_val]]\n    [>> export_file];\n")])])]),s("h4",{attrs:{id:"select子句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#select子句"}},[a._v("#")]),a._v(" SELECT子句")]),a._v(" "),s("p",[a._v("一个选择子句可以是联合查询（UNION）和另一个查询的子查询（SUBQUERY）。")]),a._v(" "),s("h5",{attrs:{id:"通配符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#通配符"}},[a._v("#")]),a._v(" 通配符")]),a._v(" "),s("p",[a._v("通配符 * 可以用于代指全部列。对于普通表，结果中只有普通列。")]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("taos> SELECT * FROM d1001;\n           ts            |       current        |   voltage   |        phase         |\n======================================================================================\n 2018-10-03 14:38:05.000 |             10.30000 |         219 |              0.31000 |\n 2018-10-03 14:38:15.000 |             12.60000 |         218 |              0.33000 |\n 2018-10-03 14:38:16.800 |             12.30000 |         221 |              0.31000 |\nQuery OK, 3 row(s) in set (0.001165s)\n")])])]),s("p",[a._v("在针对超级表，通配符包含 "),s("em",[a._v("标签列")]),a._v(" 。")]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("taos> SELECT * FROM meters;\n           ts            |       current        |   voltage   |        phase         |            location            |   groupid   |\n=====================================================================================================================================\n 2018-10-03 14:38:05.500 |             11.80000 |         221 |              0.28000 | Beijing.Haidian                |           2 |\n 2018-10-03 14:38:16.600 |             13.40000 |         223 |              0.29000 | Beijing.Haidian                |           2 |\n 2018-10-03 14:38:05.000 |             10.80000 |         223 |              0.29000 | Beijing.Haidian                |           3 |\n 2018-10-03 14:38:06.500 |             11.50000 |         221 |              0.35000 | Beijing.Haidian                |           3 |\n 2018-10-03 14:38:04.000 |             10.20000 |         220 |              0.23000 | Beijing.Chaoyang               |           3 |\n 2018-10-03 14:38:16.650 |             10.30000 |         218 |              0.25000 | Beijing.Chaoyang               |           3 |\n 2018-10-03 14:38:05.000 |             10.30000 |         219 |              0.31000 | Beijing.Chaoyang               |           2 |\n 2018-10-03 14:38:15.000 |             12.60000 |         218 |              0.33000 | Beijing.Chaoyang               |           2 |\n 2018-10-03 14:38:16.800 |             12.30000 |         221 |              0.31000 | Beijing.Chaoyang               |           2 |\nQuery OK, 9 row(s) in set (0.002022s)\n")])])]),s("p",[a._v("通配符支持表名前缀，以下两个SQL语句均为返回全部的列：")]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("SELECT * FROM d1001;\nSELECT d1001.* FROM d1001;\n")])])]),s("p",[a._v("在Join查询中，带前缀的*和不带前缀*返回的结果有差别， *返回全部表的所有列数据（不包含标签），带前缀的通配符，则只返回该表的列数据。")]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("taos> SELECT * FROM d1001, d1003 WHERE d1001.ts=d1003.ts;\n           ts            | current |   voltage   |    phase     |           ts            | current |   voltage   |    phase     |\n==================================================================================================================================\n 2018-10-03 14:38:05.000 | 10.30000|         219 |      0.31000 | 2018-10-03 14:38:05.000 | 10.80000|         223 |      0.29000 |\nQuery OK, 1 row(s) in set (0.017385s)\n")])])]),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("taos> SELECT d1001.* FROM d1001,d1003 WHERE d1001.ts = d1003.ts;\n           ts            |       current        |   voltage   |        phase         |\n======================================================================================\n 2018-10-03 14:38:05.000 |             10.30000 |         219 |              0.31000 |\nQuery OK, 1 row(s) in set (0.020443s)\n")])])]),s("p",[a._v("在使用SQL函数来进行查询过程中，部分SQL函数支持通配符操作。其中的区别在于：\n"),s("code",[a._v("count(\\*)")]),a._v("函数只返回一列。"),s("code",[a._v("first")]),a._v("、"),s("code",[a._v("last")]),a._v("、"),s("code",[a._v("last_row")]),a._v("函数则是返回全部列。")]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("taos> SELECT COUNT(*) FROM d1001;\n       count(*)        |\n========================\n                     3 |\nQuery OK, 1 row(s) in set (0.001035s)\n")])])]),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("taos> SELECT FIRST(*) FROM d1001;\n        first(ts)        |    first(current)    | first(voltage) |     first(phase)     |\n=========================================================================================\n 2018-10-03 14:38:05.000 |             10.30000 |            219 |              0.31000 |\nQuery OK, 1 row(s) in set (0.000849s)\n")])])]),s("h5",{attrs:{id:"标签列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#标签列"}},[a._v("#")]),a._v(" 标签列")]),a._v(" "),s("p",[a._v("从 2.0.14 版本开始，支持在普通表的查询中指定 "),s("em",[a._v("标签列")]),a._v("，且标签列的值会与普通列的数据一起返回。")]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("taos> SELECT location, groupid, current FROM d1001 LIMIT 2;\n            location            |   groupid   |       current        |\n======================================================================\n Beijing.Chaoyang               |           2 |             10.30000 |\n Beijing.Chaoyang               |           2 |             12.60000 |\nQuery OK, 2 row(s) in set (0.003112s)\n")])])]),s("p",[a._v("注意：普通表的通配符 * 中并不包含 "),s("em",[a._v("标签列")]),a._v("。")]),a._v(" "),s("h5",{attrs:{id:"获取标签列的去重取值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#获取标签列的去重取值"}},[a._v("#")]),a._v(" 获取标签列的去重取值")]),a._v(" "),s("p",[a._v("从 2.0.15 版本开始，支持在超级表查询标签列时，指定 distinct 关键字，这样将返回指定标签列的所有不重复取值。")]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("SELECT DISTINCT tag_name FROM stb_name;\n")])])]),s("p",[a._v("注意：目前 distinct 关键字只支持对超级表的标签列进行去重，而不能用于普通列。")]),a._v(" "),s("h4",{attrs:{id:"结果集列名"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#结果集列名"}},[a._v("#")]),a._v(" 结果集列名")]),a._v(" "),s("p",[s("code",[a._v("SELECT")]),a._v("子句中，如果不指定返回结果集合的列名，结果集列名称默认使用"),s("code",[a._v("SELECT")]),a._v("子句中的表达式名称作为列名称。此外，用户可使用"),s("code",[a._v("AS")]),a._v("来重命名返回结果集合中列的名称。例如：")]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("taos> SELECT ts, ts AS primary_key_ts FROM d1001;\n           ts            |     primary_key_ts      |\n====================================================\n 2018-10-03 14:38:05.000 | 2018-10-03 14:38:05.000 |\n 2018-10-03 14:38:15.000 | 2018-10-03 14:38:15.000 |\n 2018-10-03 14:38:16.800 | 2018-10-03 14:38:16.800 |\nQuery OK, 3 row(s) in set (0.001191s)\n")])])]),s("p",[a._v("但是针对"),s("code",[a._v("first(*)")]),a._v("、"),s("code",[a._v("last(*)")]),a._v("、"),s("code",[a._v("last_row(*)")]),a._v("不支持针对单列的重命名。")]),a._v(" "),s("h4",{attrs:{id:"隐式结果列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#隐式结果列"}},[a._v("#")]),a._v(" 隐式结果列")]),a._v(" "),s("p",[s("code",[a._v("Select_exprs")]),a._v("可以是表所属列的列名，也可以是基于列的函数表达式或计算式，数量的上限256个。当用户使用了"),s("code",[a._v("interval")]),a._v("或"),s("code",[a._v("group by tags")]),a._v("的子句以后，在最后返回结果中会强制返回时间戳列（第一列）和group by子句中的标签列。后续的版本中可以支持关闭group by子句中隐式列的输出，列输出完全由select子句控制。")]),a._v(" "),s("h4",{attrs:{id:"表-超级表-列表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#表-超级表-列表"}},[a._v("#")]),a._v(" 表（超级表）列表")]),a._v(" "),s("p",[a._v("FROM关键字后面可以是若干个表（超级表）列表，也可以是子查询的结果。\n如果没有指定用户的当前数据库，可以在表名称之前使用数据库的名称来指定表所属的数据库。例如："),s("code",[a._v("power.d1001")]),a._v(" 方式来跨库使用表。")]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("SELECT * FROM power.d1001;\n------------------------------\nUSE power;\nSELECT * FROM d1001;\n")])])]),s("h4",{attrs:{id:"特殊功能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#特殊功能"}},[a._v("#")]),a._v(" 特殊功能")]),a._v(" "),s("p",[a._v("部分特殊的查询功能可以不使用FROM子句执行。获取当前所在的数据库 database()")]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("taos> SELECT DATABASE();\n           database()           |\n=================================\n power                          |\nQuery OK, 1 row(s) in set (0.000079s)\n")])])]),s("p",[a._v("如果登录的时候没有指定默认数据库，且没有使用"),s("code",[a._v("use")]),a._v("命令切换数据，则返回NULL。")]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("taos> SELECT DATABASE();\n           database()           |\n=================================\n NULL                           |\nQuery OK, 1 row(s) in set (0.000184s)\n")])])]),s("p",[a._v("获取服务器和客户端版本号:")]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("taos> SELECT CLIENT_VERSION();\n client_version() |\n===================\n 2.0.0.0          |\nQuery OK, 1 row(s) in set (0.000070s)\n\ntaos> SELECT SERVER_VERSION();\n server_version() |\n===================\n 2.0.0.0          |\nQuery OK, 1 row(s) in set (0.000077s)\n")])])]),s("p",[a._v("服务器状态检测语句。如果服务器正常，返回一个数字（例如 1）。如果服务器异常，返回error code。该SQL语法能兼容连接池对于TDengine状态的检查及第三方工具对于数据库服务器状态的检查。并可以避免出现使用了错误的心跳检测SQL语句导致的连接池连接丢失的问题。")]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("taos> SELECT SERVER_STATUS();\n server_status() |\n==================\n               1 |\nQuery OK, 1 row(s) in set (0.000074s)\n\ntaos> SELECT SERVER_STATUS() AS status;\n   status    |\n==============\n           1 |\nQuery OK, 1 row(s) in set (0.000081s)\n")])])]),s("h4",{attrs:{id:"taos-sql中特殊关键词"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#taos-sql中特殊关键词"}},[a._v("#")]),a._v(" TAOS SQL中特殊关键词")]),a._v(" "),s("blockquote",[s("p",[a._v("TBNAME： 在超级表查询中可视为一个特殊的标签，代表查询涉及的子表名"),s("br"),a._v("\n_c0: 表示表（超级表）的第一列")])]),a._v(" "),s("h4",{attrs:{id:"小技巧"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小技巧"}},[a._v("#")]),a._v(" 小技巧")]),a._v(" "),s("p",[a._v("获取一个超级表所有的子表名及相关的标签信息：")]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("SELECT TBNAME, location FROM meters;\n")])])]),s("p",[a._v("统计超级表下辖子表数量：")]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("SELECT COUNT(TBNAME) FROM meters;\n")])])]),s("p",[a._v("以上两个查询均只支持在Where条件子句中添加针对标签（TAGS）的过滤条件。例如：")]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("taos> SELECT TBNAME, location FROM meters;\n             tbname             |            location            |\n==================================================================\n d1004                          | Beijing.Haidian                |\n d1003                          | Beijing.Haidian                |\n d1002                          | Beijing.Chaoyang               |\n d1001                          | Beijing.Chaoyang               |\nQuery OK, 4 row(s) in set (0.000881s)\n\ntaos> SELECT COUNT(tbname) FROM meters WHERE groupId > 2;\n     count(tbname)     |\n========================\n                     2 |\nQuery OK, 1 row(s) in set (0.001091s)\n")])])]),s("ul",[s("li",[a._v("可以使用* 返回所有列，或指定列名。可以对数字列进行四则运算，可以给输出的列取列名")]),a._v(" "),s("li",[a._v("where语句可以使用各种逻辑判断来过滤数字值，或使用通配符来过滤字符串")]),a._v(" "),s("li",[a._v("输出结果缺省按首列时间戳升序排序，但可以指定按降序排序(_c0指首列时间戳)。使用ORDER BY对其他字段进行排序为非法操作。")]),a._v(" "),s("li",[a._v("参数LIMIT控制输出条数，OFFSET指定从第几条开始输出。LIMIT/OFFSET对结果集的执行顺序在ORDER BY之后。")]),a._v(" "),s("li",[a._v('通过”>>"输出结果可以导出到指定文件')])]),a._v(" "),s("h3",{attrs:{id:"支持的条件过滤操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#支持的条件过滤操作"}},[a._v("#")]),a._v(" 支持的条件过滤操作")]),a._v(" "),s("table",[s("thead",[s("tr",[s("th",[a._v("Operation")]),a._v(" "),s("th",[a._v("Note")]),a._v(" "),s("th",[a._v("Applicable Data Types")])])]),a._v(" "),s("tbody",[s("tr",[s("td",[a._v(">")]),a._v(" "),s("td",[a._v("larger than")]),a._v(" "),s("td",[s("strong",[s("code",[a._v("timestamp")])]),a._v(" and all numeric types")])]),a._v(" "),s("tr",[s("td",[a._v("<")]),a._v(" "),s("td",[a._v("smaller than")]),a._v(" "),s("td",[s("strong",[s("code",[a._v("timestamp")])]),a._v(" and all numeric types")])]),a._v(" "),s("tr",[s("td",[a._v(">=")]),a._v(" "),s("td",[a._v("larger than or equal to")]),a._v(" "),s("td",[s("strong",[s("code",[a._v("timestamp")])]),a._v(" and all numeric types")])]),a._v(" "),s("tr",[s("td",[a._v("<=")]),a._v(" "),s("td",[a._v("smaller than or equal to")]),a._v(" "),s("td",[s("strong",[s("code",[a._v("timestamp")])]),a._v(" and all numeric types")])]),a._v(" "),s("tr",[s("td",[a._v("=")]),a._v(" "),s("td",[a._v("equal to")]),a._v(" "),s("td",[a._v("all types")])]),a._v(" "),s("tr",[s("td",[a._v("<>")]),a._v(" "),s("td",[a._v("not equal to")]),a._v(" "),s("td",[a._v("all types")])]),a._v(" "),s("tr",[s("td",[a._v("%")]),a._v(" "),s("td",[a._v("match with any char sequences")]),a._v(" "),s("td",[s("strong",[s("code",[a._v("binary")])]),a._v(" "),s("strong",[s("code",[a._v("nchar")])])])]),a._v(" "),s("tr",[s("td",[a._v("_")]),a._v(" "),s("td",[a._v("match with a single char")]),a._v(" "),s("td",[s("strong",[s("code",[a._v("binary")])]),a._v(" "),s("strong",[s("code",[a._v("nchar")])])])])])]),a._v(" "),s("ol",[s("li",[a._v("同时进行多个字段的范围过滤，需要使用关键词 AND 来连接不同的查询条件，暂不支持 OR 连接的不同列之间的查询过滤条件。")]),a._v(" "),s("li",[a._v("针对单一字段的过滤，如果是时间过滤条件，则一条语句中只支持设定一个；但针对其他的（普通）列或标签列，则可以使用"),s("code",[a._v("OR")]),a._v(" 关键字进行组合条件的查询过滤。例如：((value > 20 and value < 30) OR (value < 12)) 。")])]),a._v(" "),s("h3",{attrs:{id:"sql-示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sql-示例"}},[a._v("#")]),a._v(" SQL 示例")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("对于下面的例子，表tb1用以下语句创建")]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("CREATE TABLE tb1 (ts TIMESTAMP, col1 INT, col2 FLOAT, col3 BINARY(50));\n")])])])]),a._v(" "),s("li",[s("p",[a._v("查询tb1刚过去的一个小时的所有记录")]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("SELECT * FROM tb1 WHERE ts >= NOW - 1h;\n")])])])]),a._v(" "),s("li",[s("p",[a._v("查询表tb1从2018-06-01 08:00:00.000 到2018-06-02 08:00:00.000时间范围，并且col3的字符串是'nny'结尾的记录，结果按照时间戳降序")]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("SELECT * FROM tb1 WHERE ts > '2018-06-01 08:00:00.000' AND ts <= '2018-06-02 08:00:00.000' AND col3 LIKE '%nny' ORDER BY ts DESC;\n")])])])]),a._v(" "),s("li",[s("p",[a._v("查询col1与col2的和，并取名complex, 时间大于2018-06-01 08:00:00.000, col2大于1.2，结果输出仅仅10条记录，从第5条开始")]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("SELECT (col1 + col2) AS 'complex' FROM tb1 WHERE ts > '2018-06-01 08:00:00.000' AND col2 > 1.2 LIMIT 10 OFFSET 5;\n")])])])]),a._v(" "),s("li",[s("p",[a._v("查询过去10分钟的记录，col2的值大于3.14，并且将结果输出到文件 "),s("code",[a._v("/home/testoutpu.csv")]),a._v(".")]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("SELECT COUNT(*) FROM tb1 WHERE ts >= NOW - 10m AND col2 > 3.14 >> /home/testoutpu.csv;\n")])])])])]),a._v(" "),s("h2",{attrs:{id:"sql-函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sql-函数"}},[a._v("#")]),a._v(" "),s("a",{staticClass:"anchor",attrs:{id:"functions"}}),a._v("SQL 函数")]),a._v(" "),s("h3",{attrs:{id:"聚合函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#聚合函数"}},[a._v("#")]),a._v(" 聚合函数")]),a._v(" "),s("p",[a._v("TDengine支持针对数据的聚合查询。提供支持的聚合和选择函数如下：")]),a._v(" "),s("ul",[s("li",[s("p",[s("strong",[a._v("COUNT")])]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("SELECT COUNT([*|field_name]) FROM tb_name [WHERE clause];\n")])])]),s("p",[a._v("功能说明：统计表/超级表中记录行数或某列的非空值个数。")]),a._v(" "),s("p",[a._v("返回结果数据类型：长整型INT64。")]),a._v(" "),s("p",[a._v("应用字段：应用全部字段。")]),a._v(" "),s("p",[a._v("适用于：表、超级表。")]),a._v(" "),s("p",[a._v("说明：")]),a._v(" "),s("p",[a._v("1）可以使用星号"),s("em",[a._v("来替代具体的字段，使用星号(")]),a._v(")返回全部记录数量。")]),a._v(" "),s("p",[a._v("2）针对同一表的（不包含NULL值）字段查询结果均相同。")]),a._v(" "),s("p",[a._v("3）如果统计对象是具体的列，则返回该列中非NULL值的记录数量。")]),a._v(" "),s("p",[a._v("示例：")]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("taos> SELECT COUNT(*), COUNT(voltage) FROM meters;\n    count(*)        |    count(voltage)     |\n================================================\n                    9 |                     9 |\nQuery OK, 1 row(s) in set (0.004475s)\n\ntaos> SELECT COUNT(*), COUNT(voltage) FROM d1001;\n    count(*)        |    count(voltage)     |\n================================================\n                    3 |                     3 |\nQuery OK, 1 row(s) in set (0.001075s)\n")])])])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("AVG")])]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("SELECT AVG(field_name) FROM tb_name [WHERE clause];\n")])])]),s("p",[a._v("功能说明：统计表/超级表中某列的平均值。")]),a._v(" "),s("p",[a._v("返回结果数据类型：双精度浮点数Double。")]),a._v(" "),s("p",[a._v("应用字段：不能应用在timestamp、binary、nchar、bool字段。")]),a._v(" "),s("p",[a._v("适用于：表、超级表。")]),a._v(" "),s("p",[a._v("示例：")]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("taos> SELECT AVG(current), AVG(voltage), AVG(phase) FROM meters;\n    avg(current)        |       avg(voltage)        |        avg(phase)         |\n====================================================================================\n            11.466666751 |             220.444444444 |               0.293333333 |\nQuery OK, 1 row(s) in set (0.004135s)\n\ntaos> SELECT AVG(current), AVG(voltage), AVG(phase) FROM d1001;\n    avg(current)        |       avg(voltage)        |        avg(phase)         |\n====================================================================================\n            11.733333588 |             219.333333333 |               0.316666673 |\nQuery OK, 1 row(s) in set (0.000943s)\n")])])])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("TWA")])]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("SELECT TWA(field_name) FROM tb_name WHERE clause;\n")])])]),s("p",[a._v("功能说明：时间加权平均函数。统计表中某列在一段时间内的时间加权平均。")]),a._v(" "),s("p",[a._v("返回结果数据类型：双精度浮点数Double。")]),a._v(" "),s("p",[a._v("应用字段：不能应用在timestamp、binary、nchar、bool类型字段。")]),a._v(" "),s("p",[a._v("适用于：表。")])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("SUM")])]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("SELECT SUM(field_name) FROM tb_name [WHERE clause];\n")])])]),s("p",[a._v("功能说明：统计表/超级表中某列的和。")]),a._v(" "),s("p",[a._v("返回结果数据类型：双精度浮点数Double和长整型INT64。")]),a._v(" "),s("p",[a._v("应用字段：不能应用在timestamp、binary、nchar、bool类型字段。")]),a._v(" "),s("p",[a._v("适用于：表、超级表。")]),a._v(" "),s("p",[a._v("示例：")]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("taos> SELECT SUM(current), SUM(voltage), SUM(phase) FROM meters;\n    sum(current)        |     sum(voltage)      |        sum(phase)         |\n================================================================================\n            103.200000763 |                  1984 |               2.640000001 |\nQuery OK, 1 row(s) in set (0.001702s)\n\ntaos> SELECT SUM(current), SUM(voltage), SUM(phase) FROM d1001;\n    sum(current)        |     sum(voltage)      |        sum(phase)         |\n================================================================================\n            35.200000763 |                   658 |               0.950000018 |\nQuery OK, 1 row(s) in set (0.000980s)\n")])])])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("STDDEV")])]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("SELECT STDDEV(field_name) FROM tb_name [WHERE clause];\n")])])]),s("p",[a._v("功能说明：统计表中某列的均方差。")]),a._v(" "),s("p",[a._v("返回结果数据类型：双精度浮点数Double。")]),a._v(" "),s("p",[a._v("应用字段：不能应用在timestamp、binary、nchar、bool类型字段。")]),a._v(" "),s("p",[a._v("适用于：表。（从 2.0.15.1 版本开始，本函数也支持超级表）")]),a._v(" "),s("p",[a._v("示例：")]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("taos> SELECT STDDEV(current) FROM d1001;\n    stddev(current)      |\n============================\n            1.020892909 |\nQuery OK, 1 row(s) in set (0.000915s)\n")])])])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("LEASTSQUARES")])]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("SELECT LEASTSQUARES(field_name, start_val, step_val) FROM tb_name [WHERE clause];\n")])])]),s("p",[a._v("功能说明：统计表中某列的值是主键（时间戳）的拟合直线方程。start_val是自变量初始值，step_val是自变量的步长值。")]),a._v(" "),s("p",[a._v("返回结果数据类型：字符串表达式（斜率, 截距）。")]),a._v(" "),s("p",[a._v("应用字段：不能应用在timestamp、binary、nchar、bool类型字段。")]),a._v(" "),s("p",[a._v("说明：自变量是时间戳，因变量是该列的值。")]),a._v(" "),s("p",[a._v("适用于：表。")]),a._v(" "),s("p",[a._v("示例：")]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("taos> SELECT LEASTSQUARES(current, 1, 1) FROM d1001;\n            leastsquares(current, 1, 1)             |\n=====================================================\n{slop:1.000000, intercept:9.733334}                 |\nQuery OK, 1 row(s) in set (0.000921s)\n")])])])])]),a._v(" "),s("h3",{attrs:{id:"选择函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#选择函数"}},[a._v("#")]),a._v(" 选择函数")]),a._v(" "),s("ul",[s("li",[s("p",[s("strong",[a._v("MIN")])]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("SELECT MIN(field_name) FROM {tb_name | stb_name} [WHERE clause];\n")])])]),s("p",[a._v("功能说明：统计表/超级表中某列的值最小值。")]),a._v(" "),s("p",[a._v("返回结果数据类型：同应用的字段。")]),a._v(" "),s("p",[a._v("应用字段：不能应用在timestamp、binary、nchar、bool类型字段。")]),a._v(" "),s("p",[a._v("示例：")]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("taos> SELECT MIN(current), MIN(voltage) FROM meters;\n    min(current)     | min(voltage) |\n======================================\n            10.20000 |          218 |\nQuery OK, 1 row(s) in set (0.001765s)\n\ntaos> SELECT MIN(current), MIN(voltage) FROM d1001;\n    min(current)     | min(voltage) |\n======================================\n            10.30000 |          218 |\nQuery OK, 1 row(s) in set (0.000950s)\n")])])])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("MAX")])]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("SELECT MAX(field_name) FROM { tb_name | stb_name } [WHERE clause];\n")])])]),s("p",[a._v("功能说明：统计表/超级表中某列的值最大值。")]),a._v(" "),s("p",[a._v("返回结果数据类型：同应用的字段。")]),a._v(" "),s("p",[a._v("应用字段：不能应用在timestamp、binary、nchar、bool类型字段。")]),a._v(" "),s("p",[a._v("示例：")]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("taos> SELECT MAX(current), MAX(voltage) FROM meters;\n    max(current)     | max(voltage) |\n======================================\n            13.40000 |          223 |\nQuery OK, 1 row(s) in set (0.001123s)\n\ntaos> SELECT MAX(current), MAX(voltage) FROM d1001;\n    max(current)     | max(voltage) |\n======================================\n            12.60000 |          221 |\nQuery OK, 1 row(s) in set (0.000987s)\n")])])])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("FIRST")])]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("SELECT FIRST(field_name) FROM { tb_name | stb_name } [WHERE clause];\n")])])]),s("p",[a._v("功能说明：统计表/超级表中某列的值最先写入的非NULL值。")]),a._v(" "),s("p",[a._v("返回结果数据类型：同应用的字段。")]),a._v(" "),s("p",[a._v("应用字段：所有字段。")]),a._v(" "),s("p",[a._v("说明：")]),a._v(" "),s("p",[a._v("1）如果要返回各个列的首个（时间戳最小）非NULL值，可以使用FIRST(*)；")]),a._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[s("p",[a._v("如果结果集中的某列全部为NULL值，则该列的返回结果也是NULL；")])]),a._v(" "),s("li",[s("p",[a._v("如果结果集中所有列全部为NULL值，则不返回结果。")])])]),a._v(" "),s("p",[a._v("示例：")]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("taos> SELECT FIRST(*) FROM meters;\n        first(ts)        |    first(current)    | first(voltage) |     first(phase)     |\n=========================================================================================\n2018-10-03 14:38:04.000 |             10.20000 |            220 |              0.23000 |\nQuery OK, 1 row(s) in set (0.004767s)\n\ntaos> SELECT FIRST(current) FROM d1002;\n    first(current)    |\n=======================\n            10.20000 |\nQuery OK, 1 row(s) in set (0.001023s)\n")])])])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("LAST")])]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("SELECT LAST(field_name) FROM { tb_name | stb_name } [WHERE clause];\n")])])]),s("p",[a._v("功能说明：统计表/超级表中某列的值最后写入的非NULL值。")]),a._v(" "),s("p",[a._v("返回结果数据类型：同应用的字段。")]),a._v(" "),s("p",[a._v("应用字段：所有字段。")]),a._v(" "),s("p",[a._v("说明：")]),a._v(" "),s("p",[a._v("1）如果要返回各个列的最后（时间戳最大）一个非NULL值，可以使用LAST(*)；")]),a._v(" "),s("p",[a._v("2）如果结果集中的某列全部为NULL值，则该列的返回结果也是NULL；如果结果集中所有列全部为NULL值，则不返回结果。")]),a._v(" "),s("p",[a._v("示例：")]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("taos> SELECT LAST(*) FROM meters;\n        last(ts)         |    last(current)     | last(voltage) |     last(phase)      |\n========================================================================================\n2018-10-03 14:38:16.800 |             12.30000 |           221 |              0.31000 |\nQuery OK, 1 row(s) in set (0.001452s)\n\ntaos> SELECT LAST(current) FROM d1002;\n    last(current)     |\n=======================\n            10.30000 |\nQuery OK, 1 row(s) in set (0.000843s)\n")])])])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("TOP")])]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("SELECT TOP(field_name, K) FROM { tb_name | stb_name } [WHERE clause];\n")])])]),s("p",[a._v("功能说明： 统计表/超级表中某列的值最大"),s("em",[a._v("k")]),a._v("个非NULL值。若多于k个列值并列最大，则返回时间戳小的。")]),a._v(" "),s("p",[a._v("返回结果数据类型：同应用的字段。")]),a._v(" "),s("p",[a._v("应用字段：不能应用在timestamp、binary、nchar、bool类型字段。")]),a._v(" "),s("p",[a._v("说明：")]),a._v(" "),s("p",[a._v("1）"),s("em",[a._v("k")]),a._v("值取值范围1≤"),s("em",[a._v("k")]),a._v("≤100；")]),a._v(" "),s("p",[a._v("2）系统同时返回该记录关联的时间戳列。")]),a._v(" "),s("p",[a._v("示例：")]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("taos> SELECT TOP(current, 3) FROM meters;\n        ts            |   top(current, 3)    |\n=================================================\n2018-10-03 14:38:15.000 |             12.60000 |\n2018-10-03 14:38:16.600 |             13.40000 |\n2018-10-03 14:38:16.800 |             12.30000 |\nQuery OK, 3 row(s) in set (0.001548s)\n\ntaos> SELECT TOP(current, 2) FROM d1001;\n        ts            |   top(current, 2)    |\n=================================================\n2018-10-03 14:38:15.000 |             12.60000 |\n2018-10-03 14:38:16.800 |             12.30000 |\nQuery OK, 2 row(s) in set (0.000810s)\n")])])])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("BOTTOM")])]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("SELECT BOTTOM(field_name, K) FROM { tb_name | stb_name } [WHERE clause];\n")])])]),s("p",[a._v("功能说明：统计表/超级表中某列的值最小"),s("em",[a._v("k")]),a._v("个非NULL值。若多于k个列值并列最小，则返回时间戳小的。")]),a._v(" "),s("p",[a._v("返回结果数据类型：同应用的字段。")]),a._v(" "),s("p",[a._v("应用字段：不能应用在timestamp、binary、nchar、bool类型字段。")]),a._v(" "),s("p",[a._v("说明：")]),a._v(" "),s("p",[a._v("1）"),s("em",[a._v("k")]),a._v("值取值范围1≤"),s("em",[a._v("k")]),a._v("≤100；")]),a._v(" "),s("p",[a._v("2）系统同时返回该记录关联的时间戳列。")]),a._v(" "),s("p",[a._v("示例：")]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("taos> SELECT BOTTOM(voltage, 2) FROM meters;\n        ts            | bottom(voltage, 2) |\n===============================================\n2018-10-03 14:38:15.000 |                218 |\n2018-10-03 14:38:16.650 |                218 |\nQuery OK, 2 row(s) in set (0.001332s)\n\ntaos> SELECT BOTTOM(current, 2) FROM d1001;\n        ts            |  bottom(current, 2)  |\n=================================================\n2018-10-03 14:38:05.000 |             10.30000 |\n2018-10-03 14:38:16.800 |             12.30000 |\nQuery OK, 2 row(s) in set (0.000793s)\n")])])])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("PERCENTILE")])]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("SELECT PERCENTILE(field_name, P) FROM { tb_name } [WHERE clause];\n")])])]),s("p",[a._v("功能说明：统计表中某列的值百分比分位数。")]),a._v(" "),s("p",[a._v("返回结果数据类型： 双精度浮点数Double。")]),a._v(" "),s("p",[a._v("应用字段：不能应用在timestamp、binary、nchar、bool类型字段。")]),a._v(" "),s("p",[a._v("说明："),s("em",[a._v("P")]),a._v("值取值范围0≤"),s("em",[a._v("P")]),a._v("≤100，为0的时候等同于MIN，为100的时候等同于MAX。")]),a._v(" "),s("p",[a._v("示例：")]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("taos> SELECT PERCENTILE(current, 20) FROM d1001;\npercentile(current, 20)  |\n============================\n            11.100000191 |\nQuery OK, 1 row(s) in set (0.000787s)\n")])])])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("APERCENTILE")])]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("SELECT APERCENTILE(field_name, P) FROM { tb_name | stb_name } [WHERE clause];\n")])])]),s("p",[a._v("功能说明：统计表中某列的值百分比分位数，与PERCENTILE函数相似，但是返回近似结果。")]),a._v(" "),s("p",[a._v("返回结果数据类型： 双精度浮点数Double。")]),a._v(" "),s("p",[a._v("应用字段：不能应用在timestamp、binary、nchar、bool类型字段。")]),a._v(" "),s("p",[a._v("说明："),s("em",[a._v("P")]),a._v("值取值范围0≤"),s("em",[a._v("P")]),a._v("≤100，为0的时候等同于MIN，为100的时候等同于MAX。推荐使用"),s("code",[a._v("APERCENTILE")]),a._v("函数，该函数性能远胜于"),s("code",[a._v("PERCENTILE")]),a._v("函数")]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("taos> SELECT APERCENTILE(current, 20) FROM d1001;\napercentile(current, 20)  |\n============================\n            10.300000191 |\nQuery OK, 1 row(s) in set (0.000645s)\n")])])])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("LAST_ROW")])]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("SELECT LAST_ROW(field_name) FROM { tb_name | stb_name };\n")])])]),s("p",[a._v("功能说明：返回表（超级表）的最后一条记录。")]),a._v(" "),s("p",[a._v("返回结果数据类型：同应用的字段。")]),a._v(" "),s("p",[a._v("应用字段：所有字段。")]),a._v(" "),s("p",[a._v("说明：与last函数不同，last_row不支持时间范围限制，强制返回最后一条记录。")]),a._v(" "),s("p",[a._v("示例：")]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("taos> SELECT LAST_ROW(current) FROM meters;\nlast_row(current)   |\n=======================\n            12.30000 |\nQuery OK, 1 row(s) in set (0.001238s)\n\ntaos> SELECT LAST_ROW(current) FROM d1002;\nlast_row(current)   |\n=======================\n            10.30000 |\nQuery OK, 1 row(s) in set (0.001042s)\n")])])])])]),a._v(" "),s("h3",{attrs:{id:"计算函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#计算函数"}},[a._v("#")]),a._v(" 计算函数")]),a._v(" "),s("ul",[s("li",[s("p",[s("strong",[a._v("DIFF")])]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("SELECT DIFF(field_name) FROM tb_name [WHERE clause];\n")])])]),s("p",[a._v("功能说明：统计表中某列的值与前一行对应值的差。")]),a._v(" "),s("p",[a._v("返回结果数据类型： 同应用字段。")]),a._v(" "),s("p",[a._v("应用字段：不能应用在timestamp、binary、nchar、bool类型字段。")]),a._v(" "),s("p",[a._v("说明：输出结果行数是范围内总行数减一，第一行没有结果输出。")]),a._v(" "),s("p",[a._v("示例：")]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("taos> SELECT DIFF(current) FROM d1001;\n        ts            |    diff(current)     |\n=================================================\n2018-10-03 14:38:15.000 |              2.30000 |\n2018-10-03 14:38:16.800 |             -0.30000 |\nQuery OK, 2 row(s) in set (0.001162s)\n")])])])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("SPREAD")])]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("SELECT SPREAD(field_name) FROM { tb_name | stb_name } [WHERE clause];\n")])])]),s("p",[a._v("功能说明：统计表/超级表中某列的最大值和最小值之差。")]),a._v(" "),s("p",[a._v("返回结果数据类型： 双精度浮点数。")]),a._v(" "),s("p",[a._v("应用字段：不能应用在binary、nchar、bool类型字段。")]),a._v(" "),s("p",[a._v("说明：可用于TIMESTAMP字段，此时表示记录的时间覆盖范围。")]),a._v(" "),s("p",[a._v("示例：")]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("taos> SELECT SPREAD(voltage) FROM meters;\n    spread(voltage)      |\n============================\n            5.000000000 |\nQuery OK, 1 row(s) in set (0.001792s)\n\ntaos> SELECT SPREAD(voltage) FROM d1001;\n    spread(voltage)      |\n============================\n            3.000000000 |\nQuery OK, 1 row(s) in set (0.000836s)\n")])])])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("四则运算")])]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("SELECT field_name [+|-|*|/|%][Value|field_name] FROM { tb_name | stb_name }  [WHERE clause];\n")])])]),s("p",[a._v("功能说明：统计表/超级表中某列或多列间的值加、减、乘、除、取余计算结果。")]),a._v(" "),s("p",[a._v("返回结果数据类型：双精度浮点数。")]),a._v(" "),s("p",[a._v("应用字段：不能应用在timestamp、binary、nchar、bool类型字段。")]),a._v(" "),s("p",[a._v("说明：")]),a._v(" "),s("p",[a._v("1）支持两列或多列之间进行计算，可使用括号控制计算优先级；")]),a._v(" "),s("p",[a._v("2）NULL字段不参与计算，如果参与计算的某行中包含NULL，该行的计算结果为NULL。")]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("taos> SELECT current + voltage * phase FROM d1001;\n(current+(voltage*phase)) |\n============================\n            78.190000713 |\n            84.540003240 |\n            80.810000718 |\nQuery OK, 3 row(s) in set (0.001046s)\n")])])])])]),a._v(" "),s("h2",{attrs:{id:"时间维度聚合"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#时间维度聚合"}},[a._v("#")]),a._v(" "),s("a",{staticClass:"anchor",attrs:{id:"aggregation"}}),a._v("时间维度聚合")]),a._v(" "),s("p",[a._v("TDengine支持按时间段进行聚合，可以将表中数据按照时间段进行切割后聚合生成结果，比如温度传感器每秒采集一次数据，但需查询每隔10分钟的温度平均值。这个聚合适合于降维(down sample)操作, 语法如下：")]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("SELECT function_list FROM tb_name\n  [WHERE where_condition]\n  INTERVAL (interval [, offset])\n  [FILL ({NONE | VALUE | PREV | NULL | LINEAR})]\n\nSELECT function_list FROM stb_name\n  [WHERE where_condition]\n  INTERVAL (interval [, offset])\n  [FILL ({ VALUE | PREV | NULL | LINEAR})]\n  [GROUP BY tags]\n")])])]),s("ul",[s("li",[a._v("聚合时间段的长度由关键词INTERVAL指定，最短时间间隔10毫秒（10a），并且支持偏移（偏移必须小于间隔）。聚合查询中，能够同时执行的聚合和选择函数仅限于单个输出的函数：count、avg、sum 、stddev、leastsquares、percentile、min、max、first、last，不能使用具有多行输出结果的函数（例如：top、bottom、diff以及四则运算）。")]),a._v(" "),s("li",[a._v("WHERE语句可以指定查询的起止时间和其他过滤条件")]),a._v(" "),s("li",[a._v("FILL语句指定某一时间区间数据缺失的情况下的填充模式。填充模式包括以下几种：\n"),s("ul",[s("li",[a._v("不进行填充：NONE(默认填充模式)。")]),a._v(" "),s("li",[a._v("VALUE填充：固定值填充，此时需要指定填充的数值。例如：fill(value, 1.23)。")]),a._v(" "),s("li",[a._v("NULL填充：使用NULL填充数据。例如：fill(null)。")]),a._v(" "),s("li",[a._v("PREV填充：使用前一个非NULL值填充数据。例如：fill(prev)。")])])])]),a._v(" "),s("p",[a._v("说明：")]),a._v(" "),s("ol",[s("li",[a._v("使用FILL语句的时候可能生成大量的填充输出，务必指定查询的时间区间。针对每次查询，系统可返回不超过1千万条具有插值的结果。")]),a._v(" "),s("li",[a._v("在时间维度聚合中，返回的结果中时间序列严格单调递增。")]),a._v(" "),s("li",[a._v("如果查询对象是超级表，则聚合函数会作用于该超级表下满足值过滤条件的所有表的数据。如果查询中没有使用group by语句，则返回的结果按照时间序列严格单调递增；如果查询中使用了group by语句分组，则返回结果中每个group内不按照时间序列严格单调递增。")])]),a._v(" "),s("p",[s("strong",[a._v("示例:")]),a._v(" 智能电表的建表语句如下：")]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("CREATE TABLE meters (ts TIMESTAMP, current FLOAT, voltage INT, phase FLOAT) TAGS (location BINARY(64), groupId INT);\n")])])]),s("p",[a._v("针对智能电表采集的数据，以10分钟为一个阶段，计算过去24小时的电流数据的平均值、最大值、电流的中位数、以及随着时间变化的电流走势拟合直线。如果没有计算值，用前一个非NULL值填充。\n使用的查询语句如下：")]),a._v(" "),s("div",{staticClass:"language-mysql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("SELECT AVG(current), MAX(current), LEASTSQUARES(current, start_val, step_val), PERCENTILE(current, 50) FROM meters\n  WHERE ts>=NOW-1d\n  INTERVAL(10m)\n  FILL(PREV);\n")])])]),s("h2",{attrs:{id:"taos-sql-边界限制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#taos-sql-边界限制"}},[a._v("#")]),a._v(" "),s("a",{staticClass:"anchor",attrs:{id:"limitation"}}),a._v("TAOS SQL 边界限制")]),a._v(" "),s("ul",[s("li",[a._v("数据库名最大长度为32")]),a._v(" "),s("li",[a._v("表名最大长度为192，每行数据最大长度16k个字符")]),a._v(" "),s("li",[a._v("列名最大长度为64，最多允许1024列，最少需要2列，第一列必须是时间戳")]),a._v(" "),s("li",[a._v("标签最多允许128个，可以1个，标签总长度不超过16k个字符")]),a._v(" "),s("li",[a._v("SQL语句最大长度65480个字符，但可通过系统配置参数maxSQLLength修改，最长可配置为1M")]),a._v(" "),s("li",[a._v("库的数目，超级表的数目、表的数目，系统不做限制，仅受系统资源限制")])]),a._v(" "),s("h2",{attrs:{id:"taos-sql其他约定"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#taos-sql其他约定"}},[a._v("#")]),a._v(" TAOS SQL其他约定")]),a._v(" "),s("p",[s("strong",[a._v("group by的限制")])]),a._v(" "),s("p",[a._v("TAOS  SQL支持对标签、tbname进行group by操作，也支持普通列进行group by，前提是：仅限一列且该列的唯一值小于10万个。")]),a._v(" "),s("p",[s("strong",[a._v("join操作的限制")])]),a._v(" "),s("p",[a._v("TAOS SQL支持表之间按主键时间戳来join两张表的列，暂不支持两个表之间聚合后的四则运算。")]),a._v(" "),s("p",[s("strong",[a._v("is not null与不为空的表达式适用范围")])]),a._v(" "),s("p",[a._v('is not null支持所有类型的列。不为空的表达式为 <>""，仅对非数值类型的列适用。')])])}),[],!1,null,null,null);t.default=_.exports}}]);