(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{631:function(e,v,_){"use strict";_.r(v);var t=_(9),a=Object(t.a)({},(function(){var e=this,v=e.$createElement,_=e._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[_("h1",{attrs:{id:"飞行窗口和消息队列"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#飞行窗口和消息队列"}},[e._v("#")]),e._v(" 飞行窗口和消息队列")]),e._v(" "),_("h2",{attrs:{id:"简介"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[e._v("#")]),e._v(" 简介")]),e._v(" "),_("p",[e._v("为了提高消息吞吐效率和减少网络波动带来的影响，EMQ X 允许多个未确认的 QoS 1 和 QoS 2 报文同时存在于网路链路上。这些已发送但未确认的报文将被存放在 Inflight Window 中直至完成确认。")]),e._v(" "),_("p",[e._v("当网络链路中同时存在的报文超出限制，即 Inflight Window 到达长度限制（见 "),_("code",[e._v("max_inflight")]),e._v("）时，EMQ X 将不再发送后续的报文，而是将这些报文存储在 Message Queue 中。一旦 Inflight Window 中有报文完成确认，Message Queue 中的报文就会以先入先出的顺序被发送，同时存储到 Inflight Window 中。")]),e._v(" "),_("p",[e._v("当客户端离线时，Message Queue 还会被用来存储 QoS 0 消息，这些消息将在客户端下次上线时被发送。这功能默认开启，当然你也可以手动关闭，见 "),_("code",[e._v("mqueue_store_qos0")]),e._v("。")]),e._v(" "),_("p",[e._v("需要注意的是，如果 Message Queue 也到达了长度限制，后续的报文将依然缓存到 Message Queue，但相应的 Message Queue 中最先缓存的消息将被丢弃。如果队列中存在 QoS 0 消息，那么将优先丢弃 QoS 0 消息。因此，根据你的实际情况配置一个合适的 Message Queue 长度限制（见 "),_("code",[e._v("max_mqueue_len")]),e._v("）是非常重要的。")]),e._v(" "),_("h2",{attrs:{id:"飞行队列与-receive-maximum"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#飞行队列与-receive-maximum"}},[e._v("#")]),e._v(" 飞行队列与 Receive Maximum")]),e._v(" "),_("p",[e._v("MQTT v5.0 协议为 CONNECT 报文新增了一个 "),_("code",[e._v("Receive Maximum")]),e._v(" 的属性，官方对它的解释是：")]),e._v(" "),_("p",[e._v("客户端使用此值限制客户端愿意同时处理的 QoS 为 1 和 QoS 为 2 的发布消息最大数量。没有机制可以限制服务端试图发送的 QoS 为 0 的发布消息 。")]),e._v(" "),_("p",[e._v("也就是说，服务端可以在等待确认时使用不同的报文标识符向客户端发送后续的 PUBLISH 报文，直到未被确认的报文数量到达 "),_("code",[e._v("Receive Maximum")]),e._v(" 限制。")]),e._v(" "),_("p",[e._v("不难看出，"),_("code",[e._v("Receive Maximum")]),e._v(" 其实与 EMQ X 中的 Inflight Window 机制如出一辙，只是在 MQTT v5.0 协议发布前，EMQ X 就已经对接入的 MQTT 客户端提供了这一功能。现在，使用 MQTT v5.0 协议的客户端将按照 "),_("code",[e._v("Receive Maximum")]),e._v(" 的规范来设置 Inflight Window 的最大长度，而更低版本 MQTT 协议的客户端则依然按照配置来设置。")]),e._v(" "),_("h2",{attrs:{id:"配置项"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#配置项"}},[e._v("#")]),e._v(" 配置项")]),e._v(" "),_("table",[_("thead",[_("tr",[_("th",[e._v("配置项")]),e._v(" "),_("th",[e._v("类型")]),e._v(" "),_("th",[e._v("可取值")]),e._v(" "),_("th",[e._v("默认值")]),e._v(" "),_("th",[e._v("说明")])])]),e._v(" "),_("tbody",[_("tr",[_("td",[e._v("max_inflight")]),e._v(" "),_("td",[e._v("integer")]),e._v(" "),_("td",[e._v(">= 0")]),e._v(" "),_("td",[e._v("32 "),_("em",[e._v("(external)")]),e._v(","),_("br"),e._v(" 128 "),_("em",[e._v("(internal)")])]),e._v(" "),_("td",[e._v("Inflight Window 长度限制，0 即无限制")])]),e._v(" "),_("tr",[_("td",[e._v("max_mqueue_len")]),e._v(" "),_("td",[e._v("integer")]),e._v(" "),_("td",[e._v(">= 0")]),e._v(" "),_("td",[e._v("1000 "),_("em",[e._v("(external)")]),e._v(","),_("br"),e._v("10000 "),_("em",[e._v("(internal)")])]),e._v(" "),_("td",[e._v("Message Queue 长度限制，0 即无限制")])]),e._v(" "),_("tr",[_("td",[e._v("mqueue_store_qos0")]),e._v(" "),_("td",[e._v("enum")]),e._v(" "),_("td",[_("code",[e._v("true")]),e._v(", "),_("code",[e._v("false")])]),e._v(" "),_("td",[e._v("true")]),e._v(" "),_("td",[e._v("客户端离线时 EMQ X 是否存储 QoS 0 消息至 Message Queue")])])])])])}),[],!1,null,null,null);v.default=a.exports}}]);