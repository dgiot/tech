(window.webpackJsonp=window.webpackJsonp||[]).push([[65],{576:function(t,_,v){"use strict";v.r(_);var e=v(7),s=Object(e.a)({},(function(){var t=this,_=t.$createElement,v=t._self._c||_;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"钩子"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#钩子"}},[t._v("#")]),t._v(" 钩子")]),t._v(" "),v("h2",{attrs:{id:"定义"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#定义"}},[t._v("#")]),t._v(" 定义")]),t._v(" "),v("p",[v("strong",[t._v("钩子(Hooks)")]),t._v(" 是 EMQ X 提供的一种机制，它通过拦截模块间的函数调用、消息传递、事件传递来修改或扩展系统功能。")]),t._v(" "),v("p",[t._v("简单来讲，该机制目的在于增强软件系统的扩展性、方便与其他三方系统的集成、或者改变其系统原有的默认行为。如：")]),t._v(" "),v("p",[v("img",{attrs:{src:"http://dgiot-1253666439.cos.ap-shanghai-fsi.myqcloud.com/shuwa_tech/zh/backend/emqx/advanced/assets/hooks_in_system.png",alt:"hooks_in_system.png"}})]),t._v(" "),v("p",[t._v("当系统中不存在 "),v("strong",[t._v("钩子 (Hooks)")]),t._v(" 机制时，整个事件处理流程 "),v("em",[t._v("从 事件 (Event) 的输入，到 处理 (Handler)，再到完成后的返回 结果 (Result)")]),t._v(" 对于系统外部而讲，都是不可见、且无法修改的。")]),t._v(" "),v("p",[t._v("而在这个过程中加入一个可挂载函数的点 (HookPoint)，允许外部插件挂载多个回调函数，形成一个调用链。达到对内部事件处理过程的扩展和修改。")]),t._v(" "),v("p",[t._v("系统中常用到的认证插件则是按照该逻辑进行实现的。以最简单的 "),v("a",{attrs:{href:"https://github.com/emqx/emqx-auth-username",target:"_blank",rel:"noopener noreferrer"}},[t._v("emqx_auth_username"),v("OutboundLink")],1),t._v(" 为例：")]),t._v(" "),v("p",[t._v("在只开启 "),v("code",[t._v("emqx_auth_username")]),t._v(" 认证插件，且关闭匿名用户登录时。按照上图对事件的处理逻辑可知，此时认证模块的逻辑为：")]),t._v(" "),v("ol",[v("li",[t._v("收到用户认证请求 (Authenticate)")]),t._v(" "),v("li",[t._v("读取 "),v("em",[t._v("是否允许匿名登录")]),t._v(" 参数，得到 "),v("strong",[t._v("拒绝登录")])]),t._v(" "),v("li",[t._v("执行 "),v("em",[t._v("认证事件的钩子")]),t._v("，即回调到 "),v("code",[t._v("emqx_auth_username")]),t._v(" 插件中，假设其认为此次登录合法，得到 "),v("strong",[t._v("允许登录")])]),t._v(" "),v("li",[t._v("返回 "),v("strong",[t._v("认证成功")]),t._v("，成功接入系统")])]),t._v(" "),v("p",[t._v("即，如下图所示：")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("                     EMQ X Core          Hooks & Plugins     \n                |<---  Scope  ---\x3e|<-------  Scope  --------\x3e|\n                |                 |                          |\n  Authenticate  |     Allow       |   emqx_auth_username     | Authenticate\n =============> > - - - - - - No -> - - - - - - - - - - -Yes->==============> Success\n     Request    |    Anonymous?   |     authenticate?        |     Result\n                |                 |                          |\n                +-----------------+--------------------------+\n")])])]),v("p",[t._v("因此，在 EMQ X 中，"),v("strong",[t._v("钩子 (Hooks)")]),t._v(" 这种机制极大地方便了系统的扩展。我们不需要修改 "),v("a",{attrs:{href:"https://github.com/emqx/emqx",target:"_blank",rel:"noopener noreferrer"}},[t._v("emqx"),v("OutboundLink")],1),t._v(" 核心代码，仅需要在特定的位置埋下 "),v("strong",[t._v("挂载点 (HookPoint)")]),t._v(" ，便能允许外部插件扩展 EMQ X 的各种行为。")]),t._v(" "),v("p",[t._v("对于实现者来说仅需要关注：")]),t._v(" "),v("ol",[v("li",[v("strong",[t._v("挂载点 (HookPoint)")]),t._v(" 的位置：包括其作用、执行的时机、和如何挂载和取消挂载。")]),t._v(" "),v("li",[v("strong",[t._v("回调函数")]),t._v(" 的实现：包括回调函数的入参个数、作用、数据结构等，及返回值代表的含义。")]),t._v(" "),v("li",[t._v("了解回调函数在 "),v("strong",[t._v("链")]),t._v(" 上执行的机制：包括回调函数执行的顺序，及如何提前终止链的执行。")])]),t._v(" "),v("p",[t._v("如果你是在开发扩展插件中使用钩子，你应该能 "),v("strong",[t._v("完全地明白这三点，且尽量不要在钩子内部使用阻塞函数，这会影响系统的吞吐")]),t._v("。")]),t._v(" "),v("h2",{attrs:{id:"回调链"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#回调链"}},[t._v("#")]),t._v(" 回调链")]),t._v(" "),v("p",[t._v("单个 "),v("strong",[t._v("挂载点")]),t._v(" 上可能会存在多个插件都需要关心该事件并执行相应操作，所以每个 "),v("strong",[t._v("挂载点")]),t._v(" 上都可能会存在多个回调函数。")]),t._v(" "),v("p",[t._v("我们称这种由多个回调函数顺序执行所构成的链为 "),v("strong",[t._v("回调链 (Callback Functions Chain)")]),t._v("。")]),t._v(" "),v("p",[v("strong",[t._v("回调链")]),t._v(" 目前按照 "),v("a",{attrs:{href:"https://en.wikipedia.org/wiki/Chain-of-responsibility_pattern",target:"_blank",rel:"noopener noreferrer"}},[t._v("职责链(Chain-of-Responsibility)"),v("OutboundLink")],1),t._v(" 的理念进行实现。为了满足钩子的功能和使用的灵活性，它必须具有以下属性：")]),t._v(" "),v("ul",[v("li",[v("p",[v("strong",[t._v("回调链")]),t._v(" 上的回调函数必须按某种先后顺序执行。")])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("回调链")]),t._v(" 一定会存在一个输入、和输出 (在通知类事件输出则是非必须的，例如 “某客户端已成功登陆”)。")])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("回调链")]),t._v(" 具有传递性，意思是指，链会将输入给链的入参输入给第一个回调函数，第一个回调函数的返回值会传递给第二个回调函数，直到最后一个函数，最后一个函数的返回值则为整个链的返回值。")])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("回调链")]),t._v(" 需要允许其上面的函数 "),v("em",[t._v("提前终止链")]),t._v(" 和 "),v("em",[t._v("忽略本次操作")]),t._v("。")]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("提前终止")]),t._v("：本函数执行完成后，直接终止链的执行。忽略链上后续所有的回调函数。例如：某认证插件认为，此类客户端允许登录后便不需要再检查其他认证插件，所以需要提前终止。")]),t._v(" "),v("li",[v("strong",[t._v("忽略本次操作")]),t._v("：不修改链上的处理结果，直接透传给下一个回调函数。例如：存在多个认证插件的情况下，某认证插件认为，此类客户端不属于其认证范围，所以我不需要修改认证结果，应当忽略本次操作，直接将前一个函数的返回值传递给链上的下一个函数。")])])])]),t._v(" "),v("p",[t._v("由此，我们可以得到一个链的设计简图：")]),t._v(" "),v("p",[v("img",{attrs:{src:"http://dgiot-1253666439.cos.ap-shanghai-fsi.myqcloud.com/shuwa_tech/zh/backend/emqx/advanced/assets/chain_of_responsiblity.png",alt:"chain_of_responsiblity.png"}})]),t._v(" "),v("p",[t._v("该图的含义是指：")]),t._v(" "),v("ol",[v("li",[t._v("链的入参为只读的 "),v("code",[t._v("Args")]),t._v(" 与用于链上的函数修改的参数 "),v("code",[t._v("Acc")])]),t._v(" "),v("li",[t._v("链无论以何种方式终止执行，其返回值均为新的 "),v("code",[t._v("Acc")])]),t._v(" "),v("li",[t._v("图中链上一共注册了三个回调函数；分别为 "),v("code",[t._v("Fun1")]),t._v(" "),v("code",[t._v("Fun2")]),t._v(" "),v("code",[t._v("Fun3")]),t._v(" 并按所表示的顺序执行")]),t._v(" "),v("li",[t._v("回调函数执行顺序，由一个优先级确定，同一优先级的按挂载的先后顺序执行")]),t._v(" "),v("li",[t._v("回调函数通过返回：\n"),v("ul",[v("li",[v("code",[t._v("ok")]),t._v("：忽略本次操作，以只读的 "),v("code",[t._v("Args")]),t._v(" 和上个函数返回的 "),v("code",[t._v("Acc")]),t._v(" 继续链的执行")]),t._v(" "),v("li",[v("code",[t._v("{ok, NewAcc}")]),t._v("：执行了某些操作，修改了 Acc 内容，以只读的 "),v("code",[t._v("Args")]),t._v(" 和新的 "),v("code",[t._v("NewAcc")]),t._v(" 继续链的执行")])])]),t._v(" "),v("li",[t._v("回调函数也可通过返回：\n"),v("ul",[v("li",[v("code",[t._v("stop")]),t._v("：表示终止链的传递，立即返回上个函数的结果 "),v("code",[t._v("Acc")])]),t._v(" "),v("li",[v("code",[t._v("{stop, NewAcc}")]),t._v("：表示终止链的传递，立即返回本次修改的结果 "),v("code",[t._v("NewAcc")])])])])]),t._v(" "),v("p",[t._v("以上为回调链的主要设计理念，它规范了钩子上的回调函数的执行逻辑。")]),t._v(" "),v("p",[t._v("接下来 "),v("a",{attrs:{href:"#hookpoint"}},[t._v("挂载点")]),t._v("，"),v("a",{attrs:{href:"#callback"}},[t._v("回调函数")]),t._v(" 两节中，对于钩子的所有操作都是依赖于 "),v("a",{attrs:{href:"https://github.com/emqx/emqx",target:"_blank",rel:"noopener noreferrer"}},[t._v("emqx"),v("OutboundLink")],1),t._v(" 提供的 Erlang 代码级的 API。他们是整个钩子逻辑实现的基础。如需寻求：")]),t._v(" "),v("ul",[v("li",[t._v("钩子和 HTTP 服务器的应用，参见： "),v("RouterLink",{attrs:{to:"/zh/backend/emqx/advanced/webhook.html"}},[t._v("WebHook")])],1),t._v(" "),v("li",[t._v("钩子与其他语言的应用，参见： "),v("RouterLink",{attrs:{to:"/zh/backend/emqx/advanced/lang.html"}},[t._v("Multipe-Language-Support")])],1)]),t._v(" "),v("h2",{attrs:{id:"挂载点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#挂载点"}},[t._v("#")]),t._v(" 挂载点")]),t._v(" "),v("p",[t._v("EMQ X 以一个客户端在其生命周期内的关键活动为基础，预置了大量的 "),v("strong",[t._v("挂载点 (HookPoint)")]),t._v("。目前系统中预置的挂载点有：")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("名称")]),t._v(" "),v("th",[t._v("说明")]),t._v(" "),v("th",[t._v("执行时机")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("client.connect")]),t._v(" "),v("td",[t._v("处理连接报文")]),t._v(" "),v("td",[t._v("服务端收到客户端的连接报文时")])]),t._v(" "),v("tr",[v("td",[t._v("client.connack")]),t._v(" "),v("td",[t._v("下发连接应答")]),t._v(" "),v("td",[t._v("服务端准备下发连接应答报文时")])]),t._v(" "),v("tr",[v("td",[t._v("client.connected")]),t._v(" "),v("td",[t._v("成功接入")]),t._v(" "),v("td",[t._v("客户端认证完成并成功接入系统后")])]),t._v(" "),v("tr",[v("td",[t._v("client.disconnected")]),t._v(" "),v("td",[t._v("连接断开")]),t._v(" "),v("td",[t._v("客户端连接层在准备关闭时")])]),t._v(" "),v("tr",[v("td",[t._v("client.authenticate")]),t._v(" "),v("td",[t._v("连接认证")]),t._v(" "),v("td",[t._v("执行完 "),v("code",[t._v("client.connect")]),t._v(" 后")])]),t._v(" "),v("tr",[v("td",[t._v("client.check_acl")]),t._v(" "),v("td",[t._v("ACL 鉴权")]),t._v(" "),v("td",[t._v("执行 "),v("code",[t._v("发布/订阅")]),t._v(" 操作前")])]),t._v(" "),v("tr",[v("td",[t._v("client.subscribe")]),t._v(" "),v("td",[t._v("订阅主题")]),t._v(" "),v("td",[t._v("收到订阅报文后，执行 "),v("code",[t._v("client.check_acl")]),t._v(" 鉴权前")])]),t._v(" "),v("tr",[v("td",[t._v("client.unsubscribe")]),t._v(" "),v("td",[t._v("取消订阅")]),t._v(" "),v("td",[t._v("收到取消订阅报文后")])]),t._v(" "),v("tr",[v("td",[t._v("session.created")]),t._v(" "),v("td",[t._v("会话创建")]),t._v(" "),v("td",[v("code",[t._v("client.connected")]),t._v(" 执行完成，且创建新的会话后")])]),t._v(" "),v("tr",[v("td",[t._v("session.subscribed")]),t._v(" "),v("td",[t._v("会话订阅主题")]),t._v(" "),v("td",[t._v("完成订阅操作后")])]),t._v(" "),v("tr",[v("td",[t._v("session.unsubscribed")]),t._v(" "),v("td",[t._v("会话取消订阅")]),t._v(" "),v("td",[t._v("完成取消订阅操作后")])]),t._v(" "),v("tr",[v("td",[t._v("session.resumed")]),t._v(" "),v("td",[t._v("会话恢复")]),t._v(" "),v("td",[v("code",[t._v("client.connected")]),t._v(" 执行完成，且成功恢复旧的会话信息后")])]),t._v(" "),v("tr",[v("td",[t._v("session.discarded")]),t._v(" "),v("td",[t._v("会话被移除")]),t._v(" "),v("td",[t._v("会话由于被"),v("strong",[t._v("移除")]),t._v("而终止后")])]),t._v(" "),v("tr",[v("td",[t._v("session.takeovered")]),t._v(" "),v("td",[t._v("会话被接管")]),t._v(" "),v("td",[t._v("会话由于被"),v("strong",[t._v("接管")]),t._v("而终止后")])]),t._v(" "),v("tr",[v("td",[t._v("session.terminated")]),t._v(" "),v("td",[t._v("会话终止")]),t._v(" "),v("td",[t._v("会话由于其他原因被终止后")])]),t._v(" "),v("tr",[v("td",[t._v("message.publish")]),t._v(" "),v("td",[t._v("消息发布")]),t._v(" "),v("td",[t._v("服务端在发布（路由）消息前")])]),t._v(" "),v("tr",[v("td",[t._v("message.delivered")]),t._v(" "),v("td",[t._v("消息投递")]),t._v(" "),v("td",[t._v("消息准备投递到客户端前")])]),t._v(" "),v("tr",[v("td",[t._v("message.acked")]),t._v(" "),v("td",[t._v("消息回执")]),t._v(" "),v("td",[t._v("服务端在收到客户端发回的消息 ACK 后")])]),t._v(" "),v("tr",[v("td",[t._v("message.dropped")]),t._v(" "),v("td",[t._v("消息丢弃")]),t._v(" "),v("td",[t._v("发布出的消息被丢弃后")])])])]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),v("ul",[v("li",[v("p",[v("strong",[t._v("会话被移除")]),t._v(" 是指：当客户端以 "),v("code",[t._v("清除会话")]),t._v(" 的方式登入时，如果服务端中已存在该客户端的会话，那么旧的会话就会被丢弃。")])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("会话被接管")]),t._v(" 是指：当客户端以 "),v("code",[t._v("保留会话")]),t._v(" 的方式登入时，如果服务端中已存在该客户端的会话，那么旧的会话就会被新的连接所接管。")])])])]),t._v(" "),v("h3",{attrs:{id:"挂载与取消挂载"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#挂载与取消挂载"}},[t._v("#")]),t._v(" 挂载与取消挂载")]),t._v(" "),v("p",[t._v("EMQ X 提供了 API 进行钩子的挂载与取消挂载的操作。")]),t._v(" "),v("p",[v("strong",[t._v("挂载")]),t._v("：")]),t._v(" "),v("div",{staticClass:"language-erlang extra-class"},[v("pre",{pre:!0,attrs:{class:"language-erlang"}},[v("code",[v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("%% Name: 钩子的名称（挂载点）如：'client.authenticate'")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("%% {Module, Function, Args}: 回调函数的模块、方法、和附加参数")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("%% Priority：优先级，整数; 不提供则默认为 0")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token atom"}},[t._v("emqx")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("hook")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token variable"}},[t._v("Name")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),v("span",{pre:!0,attrs:{class:"token variable"}},[t._v("Module")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token variable"}},[t._v("Function")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token variable"}},[t._v("Args")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token variable"}},[t._v("Priority")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n")])])]),v("p",[t._v("挂载完成后，回调函数会按优先级从大到小执行，同一优先级按挂载的先后顺序执行。所有官方插件挂载的钩子优先级都为 "),v("code",[t._v("0")]),t._v("。")]),t._v(" "),v("p",[v("strong",[t._v("取消挂载")]),t._v("：")]),t._v(" "),v("div",{staticClass:"language-erlang extra-class"},[v("pre",{pre:!0,attrs:{class:"language-erlang"}},[v("code",[v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("%% Name: 钩子的名称（挂载点）如：'client.authenticate'")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("%% {Module, Function}: 回调函数的模块、方法")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token atom"}},[t._v("emqx")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("unhook")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token variable"}},[t._v("Name")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),v("span",{pre:!0,attrs:{class:"token variable"}},[t._v("Module")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token variable"}},[t._v("Function")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n")])])]),v("h2",{attrs:{id:"回调函数"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#回调函数"}},[t._v("#")]),t._v(" 回调函数")]),t._v(" "),v("p",[t._v("回调函数的入参及返回值要求，见下表：")]),t._v(" "),v("p",[t._v("(参数数据结构参见："),v("a",{attrs:{href:"https://github.com/emqx/emqx/blob/master/src/emqx_types.erl",target:"_blank",rel:"noopener noreferrer"}},[t._v("emqx_types.erl"),v("OutboundLink")],1),t._v(")")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("名称")]),t._v(" "),v("th",[t._v("入参")]),t._v(" "),v("th",[t._v("返回")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("client.connect")]),t._v(" "),v("td",[v("code",[t._v("ConnInfo")]),t._v("：客户端连接层参数"),v("br"),v("code",[t._v("Props")]),t._v("：MQTT v5.0  连接报文的 Properties 属性")]),t._v(" "),v("td",[t._v("新的 "),v("code",[t._v("Props")])])]),t._v(" "),v("tr",[v("td",[t._v("client.connack")]),t._v(" "),v("td",[v("code",[t._v("ConnInfo")]),t._v("：客户端连接层参数 "),v("br"),v("code",[t._v("Rc")]),t._v("：返回码"),v("br"),v("code",[t._v("Props")]),t._v(": MQTT v5.0  连接应答报文的 Properties 属性")]),t._v(" "),v("td",[t._v("新的 "),v("code",[t._v("Props")])])]),t._v(" "),v("tr",[v("td",[t._v("client.connected")]),t._v(" "),v("td",[v("code",[t._v("ClientInfo")]),t._v(":  客户端信息参数"),v("br"),v("code",[t._v("ConnInfo")]),t._v("： 客户端连接层参数")]),t._v(" "),v("td",[t._v("-")])]),t._v(" "),v("tr",[v("td",[t._v("client.disconnected")]),t._v(" "),v("td",[v("code",[t._v("ClientInfo")]),t._v("：客户端信息参数"),v("br"),v("code",[t._v("ConnInfo")]),t._v("：客户端连接层参数"),v("br"),v("code",[t._v("ReasonCode")]),t._v("：错误码")]),t._v(" "),v("td",[t._v("-")])]),t._v(" "),v("tr",[v("td",[t._v("client.authenticate")]),t._v(" "),v("td",[v("code",[t._v("ClientInfo")]),t._v("：客户端信息参数"),v("br"),v("code",[t._v("AuthResult")]),t._v("：认证结果")]),t._v(" "),v("td",[t._v("新的 "),v("code",[t._v("AuthResult")])])]),t._v(" "),v("tr",[v("td",[t._v("client.check_acl")]),t._v(" "),v("td",[v("code",[t._v("ClientInfo")]),t._v("：客户端信息参数"),v("br"),v("code",[t._v("Topic")]),t._v("：发布/订阅的主题"),v("br"),v("code",[t._v("PubSub")]),t._v(":  发布或订阅"),v("br"),v("code",[t._v("ACLResult")]),t._v("：鉴权结果")]),t._v(" "),v("td",[t._v("新的 "),v("code",[t._v("ACLResult")])])]),t._v(" "),v("tr",[v("td",[t._v("client.subscribe")]),t._v(" "),v("td",[v("code",[t._v("ClientInfo")]),t._v("：客户端信息参数"),v("br"),v("code",[t._v("Props")]),t._v("：MQTT v5.0 订阅报文的 Properties 参数"),v("br"),v("code",[t._v("TopicFilters")]),t._v("：需订阅的主题列表")]),t._v(" "),v("td",[t._v("新的 "),v("code",[t._v("TopicFilters")])])]),t._v(" "),v("tr",[v("td",[t._v("client.unsubscribe")]),t._v(" "),v("td",[v("code",[t._v("ClientInfo")]),t._v("：客户端信息参数"),v("br"),v("code",[t._v("Props")]),t._v("：MQTT v5.0 取消订阅报文的 Properties 参数"),v("br"),v("code",[t._v("TopicFilters")]),t._v("：需取消订阅的主题列表")]),t._v(" "),v("td",[t._v("新的 "),v("code",[t._v("TopicFilters")])])]),t._v(" "),v("tr",[v("td",[t._v("session.created")]),t._v(" "),v("td",[v("code",[t._v("ClientInfo")]),t._v("：客户端信息参数"),v("br"),v("code",[t._v("SessInfo")]),t._v("：会话信息")]),t._v(" "),v("td",[t._v("-")])]),t._v(" "),v("tr",[v("td",[t._v("session.subscribed")]),t._v(" "),v("td",[v("code",[t._v("ClientInfo")]),t._v("：客户端信息参数"),v("br"),v("code",[t._v("Topic")]),t._v("：订阅的主题"),v("br"),v("code",[t._v("SubOpts")]),t._v("：订阅操作的配置选项")]),t._v(" "),v("td",[t._v("-")])]),t._v(" "),v("tr",[v("td",[t._v("session.unsubscribed")]),t._v(" "),v("td",[v("code",[t._v("ClientInfo")]),t._v("：客户端信息参数"),v("br"),v("code",[t._v("Topic")]),t._v("：取消订阅的主题"),v("br"),v("code",[t._v("SubOpts")]),t._v("：取消订阅操作的配置选项")]),t._v(" "),v("td",[t._v("-")])]),t._v(" "),v("tr",[v("td",[t._v("session.resumed")]),t._v(" "),v("td",[v("code",[t._v("ClientInfo")]),t._v("：客户端信息参数"),v("br"),v("code",[t._v("SessInfo")]),t._v("：会话信息")]),t._v(" "),v("td",[t._v("-")])]),t._v(" "),v("tr",[v("td",[t._v("session.discarded")]),t._v(" "),v("td",[v("code",[t._v("ClientInfo")]),t._v("：客户端信息参数"),v("br"),v("code",[t._v("SessInfo")]),t._v("：会话信息")]),t._v(" "),v("td",[t._v("-")])]),t._v(" "),v("tr",[v("td",[t._v("session.takeovered")]),t._v(" "),v("td",[v("code",[t._v("ClientInfo")]),t._v("：客户端信息参数"),v("br"),v("code",[t._v("SessInfo")]),t._v("：会话信息")]),t._v(" "),v("td")]),t._v(" "),v("tr",[v("td",[t._v("session.terminated")]),t._v(" "),v("td",[v("code",[t._v("ClientInfo")]),t._v("：客户端信息参数"),v("br"),v("code",[t._v("Reason")]),t._v("：终止原因 "),v("br"),v("code",[t._v("SessInfo")]),t._v("：会话信息")]),t._v(" "),v("td",[t._v("-")])]),t._v(" "),v("tr",[v("td",[t._v("message.publish")]),t._v(" "),v("td",[v("code",[t._v("Message")]),t._v("：消息对象")]),t._v(" "),v("td",[t._v("新的 "),v("code",[t._v("Message")])])]),t._v(" "),v("tr",[v("td",[t._v("message.delivered")]),t._v(" "),v("td",[v("code",[t._v("ClientInfo")]),t._v("：客户端信息参数"),v("br"),v("code",[t._v("Message")]),t._v("：消息对象")]),t._v(" "),v("td",[t._v("新的 "),v("code",[t._v("Message")])])]),t._v(" "),v("tr",[v("td",[t._v("message.acked")]),t._v(" "),v("td",[v("code",[t._v("ClientInfo")]),t._v("：客户端信息参数"),v("br"),v("code",[t._v("Message")]),t._v("：消息对象")]),t._v(" "),v("td",[t._v("-")])]),t._v(" "),v("tr",[v("td",[t._v("message.dropped")]),t._v(" "),v("td",[v("code",[t._v("Message")]),t._v("：消息对象"),v("br"),v("code",[t._v("By")]),t._v("：被谁丢弃"),v("br"),v("code",[t._v("Reason")]),t._v("：丢弃原因")]),t._v(" "),v("td",[t._v("-")])])])]),t._v(" "),v("p",[t._v("具体对于这些钩子的应用，参见："),v("a",{attrs:{href:"https://github.com/emqx/emqx-plugin-template",target:"_blank",rel:"noopener noreferrer"}},[t._v("emqx_plugin_template"),v("OutboundLink")],1)])])}),[],!1,null,null,null);_.default=s.exports}}]);