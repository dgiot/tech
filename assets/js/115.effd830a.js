(window.webpackJsonp=window.webpackJsonp||[]).push([[115],{637:function(t,s,a){"use strict";a.r(s);var e=a(8),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"分布式集群"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分布式集群"}},[t._v("#")]),t._v(" 分布式集群")]),t._v(" "),a("h2",{attrs:{id:"erlang-otp-分布式编程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#erlang-otp-分布式编程"}},[t._v("#")]),t._v(" Erlang/OTP 分布式编程")]),t._v(" "),a("p",[t._v("Erlang/OTP 最初是爱立信为开发电信设备系统设计的编程语言平台，电信设备(路由器、接入网关等)典型设计是通过背板连接主控板卡与多块业务板卡的分布式系统。")]),t._v(" "),a("p",[t._v("Erlang/OTP 语言平台的分布式程序，由分布互联的 Erlang 运行系统组成，每个 Erlang 运行系统被称为节点(Node)，节点(Node) 间通过 TCP 互联，消息传递的方式通信:")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://dgiot-1253666439.cos.ap-shanghai-fsi.myqcloud.com/develop_png/zh_CN/assets/cluster_1.png",alt:"cluster_1.png"}})]),t._v(" "),a("h3",{attrs:{id:"节点-node"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#节点-node"}},[t._v("#")]),t._v(" 节点(Node)")]),t._v(" "),a("p",[t._v("Erlang 节点由唯一的节点名称标识，节点间通过名称进行通信寻址。 例如在本机启动四个 Erlang 节点，节点名称分别为:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("erl -name node1@127.0.0.1\nerl -name node2@127.0.0.1\nerl -name node3@127.0.0.1\nerl -name node4@127.0.0.1\n")])])]),a("p",[t._v("node1@127.0.0.1 控制台下建立与其他节点的连接:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node1@127.0.0.1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[t._v("1")]),t._v(">")]),t._v(" net_kernel:connect_node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'node2@127.0.0.1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(".\n"),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node1@127.0.0.1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[t._v("2")]),t._v(">")]),t._v(" net_kernel:connect_node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'node3@127.0.0.1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(".\n"),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node1@127.0.0.1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[t._v("3")]),t._v(">")]),t._v(" net_kernel:connect_node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'node4@127.0.0.1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(".\n"),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node1@127.0.0.1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[t._v("4")]),t._v(">")]),t._v(" nodes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(".\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'node2@127.0.0.1'")]),t._v(","),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'node3@127.0.0.1'")]),t._v(","),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'node4@127.0.0.1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("h2",{attrs:{id:"emq-x-分布集群设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#emq-x-分布集群设计"}},[t._v("#")]),t._v(" EMQ X 分布集群设计")]),t._v(" "),a("p",[t._v("EMQ X 消息服务器集群基于 Erlang/OTP 分布式设计，集群原理可简述为下述两条规则:")]),t._v(" "),a("p",[t._v("MQTT 客户端订阅主题时，所在节点订阅成功后广播通知其他节点：某个主题(Topic)被本节点订阅。")]),t._v(" "),a("p",[t._v("MQTT 客户端发布消息时，所在节点会根据消息主题(Topic)，检索订阅并路由消息到相关节点。")]),t._v(" "),a("p",[t._v("EMQ X 消息服务器同一集群的所有节点，都会复制一份主题(Topic) -> 节点(Node)映射的路由表，例如:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("topic1 -"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" node1, node2\ntopic2 -"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" node3\ntopic3 -"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" node2, node4\n")])])]),a("h3",{attrs:{id:"主题树-topic-trie-与路由表-route-table"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#主题树-topic-trie-与路由表-route-table"}},[t._v("#")]),t._v(" 主题树(Topic Trie)与路由表(Route Table)")]),t._v(" "),a("p",[t._v("EMQ X 消息服务器每个集群节点，都保存一份主题树(Topic Trie)和路由表。")]),t._v(" "),a("p",[t._v("例如下述主题订阅关系:")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("客户端")]),t._v(" "),a("th",[t._v("节点")]),t._v(" "),a("th",[t._v("订阅主题")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("client1")]),t._v(" "),a("td",[t._v("node1")]),t._v(" "),a("td",[t._v("t/+/x, t/+/y")])]),t._v(" "),a("tr",[a("td",[t._v("client2")]),t._v(" "),a("td",[t._v("node2")]),t._v(" "),a("td",[t._v("t/#")])]),t._v(" "),a("tr",[a("td",[t._v("client3")]),t._v(" "),a("td",[t._v("node3")]),t._v(" "),a("td",[t._v("t/+/x, t/a")])])])]),t._v(" "),a("p",[t._v("最终会生成如下主题树(Topic Trie)和路由表(Route Table):")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://dgiot-1253666439.cos.ap-shanghai-fsi.myqcloud.com/develop_png/zh_CN/assets/cluster_2.png",alt:"cluster_2.png"}})]),t._v(" "),a("h3",{attrs:{id:"订阅-subscription-与消息派发"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#订阅-subscription-与消息派发"}},[t._v("#")]),t._v(" 订阅(Subscription)与消息派发")]),t._v(" "),a("p",[t._v("客户端的主题订阅(Subscription)关系，只保存在客户端所在节点，用于本节点内派发消息到客户端。")]),t._v(" "),a("p",[t._v("例如client1向主题’t/a’发布消息，消息在节点间的路由与派发流程:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("title: Message Route and Deliver\n\nclient1 -"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" node1: Publish"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("t/a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    node1 --"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" node2: Route"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("t/"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#]")]),t._v("\n        node2 --"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" client2: Deliver"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("t/"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#]")]),t._v("\n    node1 --"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" node3: Route"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("t/a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        node3 --"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" client3: Deliver"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("t/a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("p",[a("img",{attrs:{src:"http://dgiot-1253666439.cos.ap-shanghai-fsi.myqcloud.com/develop_png/zh_CN/assets/design_9.png",alt:"design_9.png"}})]),t._v(" "),a("h2",{attrs:{id:"节点发现与自动集群"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#节点发现与自动集群"}},[t._v("#")]),t._v(" 节点发现与自动集群")]),t._v(" "),a("p",[t._v("EMQ X 支持基于 Ekka 库的集群自动发现 (Autocluster)。Ekka 是为 Erlang/OTP 应用开发的集群管理库，支持\nErlang 节点自动发现 (Service Discovery)、自动集群 (Autocluster)、脑裂自动愈合 (Network Partition\nAutoheal)、自动删除宕机节点 (Autoclean)。")]),t._v(" "),a("p",[t._v("EMQ X 支持多种节点发现策略:")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("策略")]),t._v(" "),a("th",[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("manual")]),t._v(" "),a("td",[t._v("手动命令创建集群")])]),t._v(" "),a("tr",[a("td",[t._v("static")]),t._v(" "),a("td",[t._v("静态节点列表自动集群")])]),t._v(" "),a("tr",[a("td",[t._v("mcast")]),t._v(" "),a("td",[t._v("UDP 组播方式自动集群")])]),t._v(" "),a("tr",[a("td",[t._v("dns")]),t._v(" "),a("td",[t._v("DNS A 记录自动集群")])]),t._v(" "),a("tr",[a("td",[t._v("etcd")]),t._v(" "),a("td",[t._v("通过 etcd 自动集群")])]),t._v(" "),a("tr",[a("td",[t._v("k8s")]),t._v(" "),a("td",[t._v("Kubernetes 服务自动集群")])])])]),t._v(" "),a("h3",{attrs:{id:"手动-manual-方式管理集群介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#手动-manual-方式管理集群介绍"}},[t._v("#")]),t._v(" 手动(manual) 方式管理集群介绍")]),t._v(" "),a("p",[t._v("假设要在两台服务器 s1.emqx.io, s2.emqx.io 上部署 EMQ X 集群:")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("节点名")]),t._v(" "),a("th",[t._v("主机名 (FQDN)")]),t._v(" "),a("th",[t._v("IP 地址")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("emqx@s1.emqx.io 或 emqx@192.168.0.10")]),t._v(" "),a("td",[t._v("s1.emqx.io")]),t._v(" "),a("td",[t._v("192.168.0.10")])]),t._v(" "),a("tr",[a("td",[t._v("emqx@s2.emqx.io 或 emqx@192.168.0.20")]),t._v(" "),a("td",[t._v("s2.emqx.io")]),t._v(" "),a("td",[t._v("192.168.0.20")])])])]),t._v(" "),a("p",[a("strong",[t._v("注意：")]),t._v(" 节点名格式为 "),a("a",{attrs:{href:"mailto:Name@Host"}},[t._v("Name@Host")]),t._v(", Host 必须是 IP 地址或 FQDN (主机名。域名)")]),t._v(" "),a("h4",{attrs:{id:"配置-emqx-s1-emqx-io-节点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置-emqx-s1-emqx-io-节点"}},[t._v("#")]),t._v(" 配置 emqx@s1.emqx.io 节点")]),t._v(" "),a("p",[t._v("emqx/etc/emqx.conf:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("node.name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" emqx@s1.emqx.io\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 或")]),t._v("\nnode.name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" emqx@192.168.0.10\n")])])]),a("p",[t._v("也可通过环境变量:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("EMQX_NODE_NAME")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("emqx@s1.emqx.io "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" ./bin/emqx start\n")])])]),a("p",[a("strong",[t._v("注意:")]),t._v(" 节点启动加入集群后，节点名称不能变更。")]),t._v(" "),a("h4",{attrs:{id:"配置-emqx-s2-emqx-io-节点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置-emqx-s2-emqx-io-节点"}},[t._v("#")]),t._v(" 配置 emqx@s2.emqx.io 节点")]),t._v(" "),a("p",[t._v("emqx/etc/emqx.conf:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("node.name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" emqx@s2.emqx.io\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 或")]),t._v("\nnode.name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" emqx@192.168.0.20\n")])])]),a("h4",{attrs:{id:"节点加入集群"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#节点加入集群"}},[t._v("#")]),t._v(" 节点加入集群")]),t._v(" "),a("p",[t._v("启动两台节点后，在 s2.emqx.io 上执行:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ ./bin/emqx_ctl cluster "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),t._v(" emqx@s1.emqx.io\n\nJoin the cluster successfully.\nCluster status: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("running_nodes,"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'emqx@s1.emqx.io'")]),t._v(","),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'emqx@s2.emqx.io'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("p",[a("strong",[t._v("注意:")]),t._v(" s2.emqx.io加入集群后会清除本身全部的数据，同步s1.emqx.io节点的数据。如果还有s3.emqx.io节点，那么需要在s3.emqx.io节点去执行命令加入emqx@s1.emqx.io或者emqx@s2.emqx.io， 已经在集群的节点不能在join到其他节点，否则会退出当前集群和join的节点组成一个新的集群")]),t._v(" "),a("p",[t._v("在任意节点上查询集群状态:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ ./bin/emqx_ctl cluster status\n\nCluster status: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("running_nodes,"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'emqx@s1.emqx.io'")]),t._v(","),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'emqx@s2.emqx.io'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("h4",{attrs:{id:"退出集群"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#退出集群"}},[t._v("#")]),t._v(" 退出集群")]),t._v(" "),a("p",[t._v("节点退出集群，两种方式:")]),t._v(" "),a("ol",[a("li",[t._v("leave: 让本节点退出集群")]),t._v(" "),a("li",[t._v("force-leave: 从集群删除其他节点")])]),t._v(" "),a("p",[t._v("让 emqx@s2.emqx.io 主动退出集群:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ ./bin/emqx_ctl cluster leave\n")])])]),a("p",[t._v("或在 s1.emqx.io 上，从集群删除 emqx@s2.emqx.io 节点:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ ./bin/emqx_ctl cluster force-leave emqx@s2.emqx.io\n")])])]),a("h2",{attrs:{id:"防火墙设置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#防火墙设置"}},[t._v("#")]),t._v(" 防火墙设置")]),t._v(" "),a("p",[t._v("若预先设置了环境变量 WITH_EPMD=1, 启动 emqx 时会使用启动 epmd (监听端口 4369) 做节点发现。称为 "),a("code",[t._v("epmd 模式")]),t._v("。\n若环境变量 WITH_EPMD 没有设置，则启动 emqx 时不启用 epmd，而使用 emqx ekka 的节点发现，这也是 4.0 之后的默认节点发现方式。称为 "),a("code",[t._v("ekka 模式")]),t._v("。")]),t._v(" "),a("p",[a("strong",[t._v("epmd 模式：")]),t._v("\n如果集群节点间存在防火墙，防火墙需要开启 TCP 4369 端口和一个 TCP 端口段。4369 由 epmd 端口映射服务使用，TCP\n端口段用于节点间建立连接与通信。")]),t._v(" "),a("p",[t._v("防火墙设置后，需要在 "),a("code",[t._v("emqx/etc/emqx.conf")]),t._v(" 中配置相同的端口段:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Distributed node port range")]),t._v("\nnode.dist_listen_min "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6369")]),t._v("\nnode.dist_listen_max "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7369")]),t._v("\n")])])]),a("p",[a("strong",[t._v("ekka 模式（4.0 版本之后的默认模式）：")])]),t._v(" "),a("p",[t._v("如果集群节点间存在防火墙，默认情况下，只需要开启 TCP 4370 端口。")]),t._v(" "),a("p",[t._v("但如果 node.name 配置制定的节点名字里，带有数字后缀(Offset)，则需要开启 4370 + Offset 端口。")]),t._v(" "),a("p",[t._v("比如：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("node.name = emqx-1@192.168.0.12\n")])])]),a("p",[t._v("则需要开启 4371 端口。")])])}),[],!1,null,null,null);s.default=n.exports}}]);