(window.webpackJsonp=window.webpackJsonp||[]).push([[190],{516:function(t,a,s){"use strict";s.r(a);var n=s(10),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"编解码-schema-registry-介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#编解码-schema-registry-介绍"}},[t._v("#")]),t._v(" 编解码（Schema Registry）介绍")]),t._v(" "),s("p",[t._v("物联网设备终端种类繁杂，各厂商使用的编码格式各异，所以在接入物联网平台的时候就产生了统一数据格式的需求，以便平台之上的应用进行设备管理。")]),t._v(" "),s("p",[t._v("Schema Registry 管理编解码使用的 Schema、处理编码或解码请求并返回结果。Schema Registry 配合规则引擎，可适配各种场景的设备接入和规则设计。")]),t._v(" "),s("p",[t._v("EMQ X Schema Registry 目前可支持三种格式的编解码："),s("a",{attrs:{href:"https://avro.apache.org",target:"_blank",rel:"noopener noreferrer"}},[t._v("Avro"),s("OutboundLink")],1),t._v("，"),s("a",{attrs:{href:"https://developers.google.com/protocol-buffers/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Protobuf"),s("OutboundLink")],1),t._v("，以及自定义编码。其中\nAvro 和 Protobuf 是依赖 Schema 的数据格式，编码后的数据为二进制，解码后为 Map 格式。解码后的数据可直接被规则引擎和其他插件使用。用户自定义的 (3rd-party)编解码服务通过 HTTP 或 TCP 回调的方式，进行更加贴近业务需求的编解码。")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),s("p",[t._v("Schema Registry 为 Avro 和 Protobuf 等内置编码格式维护 Schema 文本，但对于自定义编解码\n(3rd-party) 格式，如需要，Schema 文本需由编解码服务自己维护")])]),t._v(" "),s("h2",{attrs:{id:"数据格式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据格式"}},[t._v("#")]),t._v(" 数据格式")]),t._v(" "),s("p",[t._v("下图展示了 Schema Registry 的一个应用案例。多个设备上报不同格式的数据，经过 Schema Registry 解码之后，变为统一的内部格式，然后转发给后台应用。")]),t._v(" "),s("p",[s("img",{attrs:{src:"http://dgiot-1253666439.cos.ap-shanghai-fsi.myqcloud.com/develop_png/zh_CN/rule/assets/schema-registry.png",alt:"schema-registry.png"}})]),t._v(" "),s("h3",{attrs:{id:"二进制格式支持"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二进制格式支持"}},[t._v("#")]),t._v(" 二进制格式支持")]),t._v(" "),s("p",[t._v("Schema Registry 数据格式包括 "),s("a",{attrs:{href:"https://avro.apache.org",target:"_blank",rel:"noopener noreferrer"}},[t._v("Avro"),s("OutboundLink")],1),t._v(" 和 "),s("a",{attrs:{href:"https://developers.google.com/protocol-buffers/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Protobuf"),s("OutboundLink")],1),t._v("。Avro 和 Protobuf 是依赖 Schema 的数据格式，编码后的数据为二进制，使用 Schema Registry 解码后的内部数据格式(Map，稍后讲解) 可直接被规则引擎和其他插件使用。此外 Schema Registry 支持用户自定义的 (3rd-party) 编解码服务，通过 HTTP 或 TCP 回调的方式，进行更加贴近业务需求的编解码。")]),t._v(" "),s("h2",{attrs:{id:"架构设计"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#架构设计"}},[t._v("#")]),t._v(" 架构设计")]),t._v(" "),s("p",[t._v("Schema Registry 为 Avro 和 Protobuf 等内置编码格式维护 Schema 文本，但对于自定义编解码 (3rd-party) 格式，如需要 Schema，Schema 文本需由编解码服务自己维护。Schema API 提供了通过 Schema Name 的添加、查询和删除操作。")]),t._v(" "),s("p",[t._v("Schema Registry 既可以解码，也可以编码。编码和解码时需要指定 Schema Name。")]),t._v(" "),s("p",[s("img",{attrs:{src:"http://dgiot-1253666439.cos.ap-shanghai-fsi.myqcloud.com/develop_png/zh_CN/rule/assets/arch.png",alt:"arch.png"}})]),t._v(" "),s("p",[t._v("编码调用示例：参数为 Schema")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("schema_encode")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("SchemaName"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" RawData\n")])])]),s("p",[t._v("解码调用示例：")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("schema_decode")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("SchemaName"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" RawData"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" Data\n")])])]),s("p",[t._v("常见的使用案例是，使用规则引擎来调用 Schema Registry 提供的编码和解码接口，然后将编码或解码后的数据作为后续动作的输入。")]),t._v(" "),s("h2",{attrs:{id:"编解码-规则引擎"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#编解码-规则引擎"}},[t._v("#")]),t._v(" 编解码 + 规则引擎")]),t._v(" "),s("p",[t._v("EMQ X 的消息处理层面可分为消息路由(Messaging)、规则引擎(Rule Engine)、数据格式转换(Data Conversion) 三个部分。")]),t._v(" "),s("p",[t._v("EMQ X 的 PUB/SUB 系统将消息路由到指定的主题。规则引擎可以灵活地配置数据的业务规则，按规则匹配消息，然后指定相应动作。数据格式转换发生在规则匹配的过程之前，先将数据转换为可参与规则匹配的 Map 格式，然后进行匹配。")]),t._v(" "),s("p",[s("img",{attrs:{src:"http://dgiot-1253666439.cos.ap-shanghai-fsi.myqcloud.com/develop_png/zh_CN/rule/assets/SchemaAndRuleEngine.png",alt:"SchemaAndRuleEngine.png"}})]),t._v(" "),s("h3",{attrs:{id:"规则引擎内部数据格式-map"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#规则引擎内部数据格式-map"}},[t._v("#")]),t._v(" 规则引擎内部数据格式(Map)")]),t._v(" "),s("p",[t._v("规则引擎内部使用的数据格式为 Erlang Map，所以如果原数据内容为二进制或者其他格式，必须使用编解码函数(比如上面提到的 schema_decode 和 json_decode 函数) 将其转换为 Map。")]),t._v(" "),s("p",[t._v("Map 是一个 Key-Value 形式的数据结构，形如 #{key => value}。例如，"),s("code",[t._v('user = #{id => 1, name => "Steve"}')]),t._v(" 定义了一个 "),s("code",[t._v("id")]),t._v(" 为 "),s("code",[t._v("1")]),t._v("，"),s("code",[t._v("name")]),t._v(" 为 "),s("code",[t._v('"Steve"')]),t._v(" 的 "),s("code",[t._v("user")]),t._v(" Map。")]),t._v(" "),s("p",[t._v('SQL 语句提供了 "." 操作符嵌套地提取和添加 Map 字段。下面是使用 SQL 语句对这个 Map 操作的示例:')]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("user")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" my_id\n")])])]),s("p",[t._v("SQL 语句的筛选结果为 "),s("code",[t._v("#{my_id => 1}")]),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"json-编解码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#json-编解码"}},[t._v("#")]),t._v(" JSON 编解码")]),t._v(" "),s("p",[t._v("规则引擎的 SQL 语句提供了对 JSON 格式字符串的编解码支持，将 JSON 字符串和 Map 格式相互转换的 SQL 函数为 json_decode() 和 json_encode():")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" json_decode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("payload"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" p "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"t/#"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("y\n")])])]),s("p",[t._v("上面这个 SQL 语句将会匹配到 payload 内容为 JSON 字符串： "),s("code",[t._v('{"x" = 1, "y" = 1}')]),t._v(" , 并且 topic 为 "),s("code",[t._v("t/a")]),t._v(" 的 MQTT 消息。")]),t._v(" "),s("p",[s("code",[t._v("json_decode(payload) as p")]),t._v(" 将 JSON 字符串解码为下面的 Map 数据结构，从而可以在 "),s("code",[t._v("WHERE")]),t._v(" 子句中使用 p.x 和 p.y 使用 Map 中的字段：")]),t._v(" "),s("div",{staticClass:"language-erlang extra-class"},[s("pre",{pre:!0,attrs:{class:"language-erlang"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token atom"}},[t._v("p")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token atom"}},[t._v("x")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token atom"}},[t._v("y")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[s("strong",[t._v("注意:")]),t._v(" "),s("code",[t._v("AS")]),t._v(" 子句是必须的，将解码之后的数据赋值给某个Key，后面才能对其进行后续操作。")]),t._v(" "),s("h2",{attrs:{id:"编解码实战"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#编解码实战"}},[t._v("#")]),t._v(" 编解码实战")]),t._v(" "),s("h3",{attrs:{id:"protobuf-数据解析举例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#protobuf-数据解析举例"}},[t._v("#")]),t._v(" Protobuf 数据解析举例")]),t._v(" "),s("h4",{attrs:{id:"规则需求"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#规则需求"}},[t._v("#")]),t._v(" 规则需求")]),t._v(" "),s("p",[t._v('设备发布一个使用 Protobuf 编码的二进制消息，需要通过规则引擎匹配过后，将消息重新发布到与 "name" 字段相关的主题上。主题的格式为 "person/${name}"。')]),t._v(" "),s("p",[t._v('比如，将 "name" 字段为 "Shawn" 的消息重新发布到主题 "person/Shawn"。')]),t._v(" "),s("h4",{attrs:{id:"创建-schema"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建-schema"}},[t._v("#")]),t._v(" 创建 Schema")]),t._v(" "),s("p",[t._v("在 EMQ X 的 "),s("a",{attrs:{href:"http://127.0.0.1:18083/#/schemas/0?oper=create",target:"_blank",rel:"noopener noreferrer"}},[t._v("Dashboard"),s("OutboundLink")],1),t._v(" 界面，使用下面的参数创建一个 Protobuf Schema:")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("名称：protobuf_person")])]),t._v(" "),s("li",[s("p",[t._v("编解码类型：protobuf")])]),t._v(" "),s("li",[s("p",[t._v("Schema：下面的 protobuf schema 定义了一个 Person 消息。")])])]),t._v(" "),s("div",{staticClass:"language-protobuf extra-class"},[s("pre",{pre:!0,attrs:{class:"language-protobuf"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("message")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("required")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("required")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int32")]),t._v(" id "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("optional")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" email "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h4",{attrs:{id:"创建规则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建规则"}},[t._v("#")]),t._v(" 创建规则")]),t._v(" "),s("p",[s("strong",[t._v("使用刚才创建好的 Schema 来编写规则 SQL 语句：")])]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v("\n  schema_decode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'protobuf_person'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" payload"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Person'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" person"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" payload\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"t/#"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v("\n  person"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Shawn'")]),t._v("\n")])])]),s("p",[t._v("这里的关键点在于 "),s("code",[t._v("schema_decode('protobuf_person', payload, 'Person')")]),t._v(":")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("schema_decode")]),t._v(" 函数将 payload 字段的内容按照 'protobuf_person' 这个 Schema 来做解码;")]),t._v(" "),s("li",[s("code",[t._v("as person")]),t._v(' 将解码后的值保存到变量 "person" 里;')]),t._v(" "),s("li",[t._v("最后一个参数 "),s("code",[t._v("Person")]),t._v(" 指明了 payload 中的消息的类型是 protobuf schema 里定义的 'Person' 类型。")])]),t._v(" "),s("p",[s("strong",[t._v("然后使用以下参数添加动作：")])]),t._v(" "),s("ul",[s("li",[t._v("动作类型：消息重新发布")]),t._v(" "),s("li",[t._v("目的主题：person/${person.name}")]),t._v(" "),s("li",[t._v("消息内容模板：${person}")])]),t._v(" "),s("p",[t._v('这个动作将解码之后的 "person" 以 JSON 的格式发送到 '),s("code",[t._v("person/${person.name}")]),t._v(" 这个主题。其中"),s("code",[t._v("${person.name}")]),t._v(' 是个变量占位符，将在运行时被替换为消息内容中 "name" 字段的值。')]),t._v(" "),s("h4",{attrs:{id:"设备端代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#设备端代码"}},[t._v("#")]),t._v(" 设备端代码")]),t._v(" "),s("p",[t._v("规则创建好之后，就可以模拟数据进行测试了。")]),t._v(" "),s("p",[t._v('下面的代码使用 Python 语言填充了一个 Person 消息并编码为二进制数据，然后将其发送到 "t/1" 主题。详见 '),s("a",{attrs:{href:"https://github.com/terry-xiaoyu/schema-registry-examples/blob/master/protobuf/pb2_mqtt.py",target:"_blank",rel:"noopener noreferrer"}},[t._v("完整代码"),s("OutboundLink")],1),t._v("。")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("publish_msg")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("client"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    p "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" person_pb2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Person"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("id")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n    p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Shawn"')]),t._v("\n    p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("email "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"liuxy@emqx.io"')]),t._v("\n    message "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("SerializeToString"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    topic "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"t/1"')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"publish to topic: t/1, payload:"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" message"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    client"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("publish"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("topic"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" payload"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("message"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" qos"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" retain"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("False")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h4",{attrs:{id:"检查规则执行结果"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#检查规则执行结果"}},[t._v("#")]),t._v(" 检查规则执行结果")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("在 Dashboard 的 "),s("a",{attrs:{href:"http://127.0.0.1:18083/#/websocket",target:"_blank",rel:"noopener noreferrer"}},[t._v("Websocket"),s("OutboundLink")],1),t._v(' 工具里，登录一个 MQTT Client 并订阅 "person/#"。')])]),t._v(" "),s("li",[s("p",[t._v("安装 python 依赖，并执行设备端代码:")])])]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("$ pip3 "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" protobuf\n$ pip3 "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" paho-mqtt\n\n$ python3 ./pb2_mqtt.py\nConnected with result code "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\npublish to topic: t/1, payload: b"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'"),s("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[t._v("\\n")]),s("span",{pre:!0,attrs:{class:"token entity",title:"\\x05"}},[t._v("\\x05")]),t._v("Shawn"),s("span",{pre:!0,attrs:{class:"token entity",title:"\\x10"}},[t._v("\\x10")]),s("span",{pre:!0,attrs:{class:"token entity",title:"\\x01"}},[t._v("\\x01")]),s("span",{pre:!0,attrs:{class:"token entity",title:"\\x1a"}},[t._v("\\x1a")]),s("span",{pre:!0,attrs:{class:"token entity",title:"\\r"}},[t._v("\\r")]),t._v("liuxy@emqx.io'")]),t._v("\nt/1 b"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'"),s("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[t._v("\\n")]),s("span",{pre:!0,attrs:{class:"token entity",title:"\\x05"}},[t._v("\\x05")]),t._v("Shawn"),s("span",{pre:!0,attrs:{class:"token entity",title:"\\x10"}},[t._v("\\x10")]),s("span",{pre:!0,attrs:{class:"token entity",title:"\\x01"}},[t._v("\\x01")]),s("span",{pre:!0,attrs:{class:"token entity",title:"\\x1a"}},[t._v("\\x1a")]),s("span",{pre:!0,attrs:{class:"token entity",title:"\\r"}},[t._v("\\r")]),t._v("liuxy@emqx.io'")]),t._v("\n")])])]),s("ol",{attrs:{start:"3"}},[s("li",[t._v("检查 Websocket 端收到主题为 "),s("code",[t._v("person/Shawn")]),t._v(" 的消息:")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"email"')]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"liuxy@emqx.io"')]),t._v(","),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"id"')]),t._v(":1,"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Shawn"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"avro-数据解析举例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#avro-数据解析举例"}},[t._v("#")]),t._v(" Avro 数据解析举例")]),t._v(" "),s("h4",{attrs:{id:"规则需求-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#规则需求-2"}},[t._v("#")]),t._v(" 规则需求")]),t._v(" "),s("p",[t._v('设备发布一个使用 Avro 编码的二进制消息，需要通过规则引擎匹配过后，将消息重新发布到与 "name" 字段相关的主题上。主题的格式为 "avro_user/${name}"。')]),t._v(" "),s("p",[t._v('比如，将 "name" 字段为 "Shawn" 的消息重新发布到主题 "avro_user/Shawn"。')]),t._v(" "),s("h4",{attrs:{id:"创建-schema-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建-schema-2"}},[t._v("#")]),t._v(" 创建 Schema")]),t._v(" "),s("p",[t._v("在 EMQ X 的 "),s("a",{attrs:{href:"http://127.0.0.1:18083/#/schemas/0?oper=create",target:"_blank",rel:"noopener noreferrer"}},[t._v("Dashboard"),s("OutboundLink")],1),t._v(" 界面，使用下面的参数创建一个 Avro Schema:")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("名称：avro_user")])]),t._v(" "),s("li",[s("p",[t._v("编解码类型：avro")])]),t._v(" "),s("li",[s("p",[t._v("Schema:")])])]),t._v(" "),s("div",{staticClass:"language-protobuf extra-class"},[s("pre",{pre:!0,attrs:{class:"language-protobuf"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"type"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"record"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fields"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"type"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"string"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"favorite_number"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"type"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"int"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"null"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"favorite_color"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"type"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"string"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"null"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h4",{attrs:{id:"创建规则-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建规则-2"}},[t._v("#")]),t._v(" 创建规则")]),t._v(" "),s("p",[s("strong",[t._v("使用刚才创建好的 Schema 来编写规则 SQL 语句：")])]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v("\n  schema_decode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'avro_user'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" payload"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" avro_user"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" payload\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"t/#"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v("\n  avro_user"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Shawn'")]),t._v("\n")])])]),s("p",[t._v("这里的关键点在于 "),s("code",[t._v("schema_decode('avro_user', payload)")]),t._v(":")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("schema_decode")]),t._v(" 函数将 payload 字段的内容按照 'avro_user' 这个 Schema 来做解码;")]),t._v(" "),s("li",[s("code",[t._v("as avro_user")]),t._v(' 将解码后的值保存到变量 "avro_user" 里。')])]),t._v(" "),s("p",[s("strong",[t._v("然后使用以下参数添加动作：")])]),t._v(" "),s("ul",[s("li",[t._v("动作类型：消息重新发布")]),t._v(" "),s("li",[t._v("目的主题：avro_user/${avro_user.name}")]),t._v(" "),s("li",[t._v("消息内容模板：${avro_user}")])]),t._v(" "),s("p",[t._v('这个动作将解码之后的 "user" 以 JSON 的格式发送到 '),s("code",[t._v("avro_user/${avro_user.name}")]),t._v(" 这个主题。其中"),s("code",[t._v("${avro_user.name}")]),t._v(' 是个变量占位符，将在运行时被替换为消息内容中 "name" 字段的值。')]),t._v(" "),s("h4",{attrs:{id:"设备端代码-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#设备端代码-2"}},[t._v("#")]),t._v(" 设备端代码")]),t._v(" "),s("p",[t._v("规则创建好之后，就可以模拟数据进行测试了。")]),t._v(" "),s("p",[t._v('下面的代码使用 Python 语言填充了一个 User 消息并编码为二进制数据，然后将其发送到 "t/1" 主题。详见 '),s("a",{attrs:{href:"https://github.com/terry-xiaoyu/schema-registry-examples/blob/master/avro/avro_mqtt.py",target:"_blank",rel:"noopener noreferrer"}},[t._v("完整代码"),s("OutboundLink")],1),t._v("。")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("publish_msg")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("client"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    datum_w "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" avro"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("io"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("DatumWriter"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("SCHEMA"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    buf "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" io"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("BytesIO"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    encoder "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" avro"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("io"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("BinaryEncoder"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    datum_w"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("write"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Shawn"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"favorite_number"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("666")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"favorite_color"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"red"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" encoder"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    message "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("getvalue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    topic "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"t/1"')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"publish to topic: t/1, payload:"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" message"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    client"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("publish"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("topic"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" payload"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("message"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" qos"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" retain"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("False")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h4",{attrs:{id:"检查规则执行结果-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#检查规则执行结果-2"}},[t._v("#")]),t._v(" 检查规则执行结果")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("在 Dashboard 的 "),s("a",{attrs:{href:"http://127.0.0.1:18083/#/websocket",target:"_blank",rel:"noopener noreferrer"}},[t._v("Websocket"),s("OutboundLink")],1),t._v(' 工具里，登录一个 MQTT Client 并订阅 "avro_user/#"。')])]),t._v(" "),s("li",[s("p",[t._v("安装 python 依赖，并执行设备端代码:")])])]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("$ pip3 "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" protobuf\n$ pip3 "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" paho-mqtt\n\n$ python3 avro_mqtt.py\nConnected with result code "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\npublish to topic: t/1, payload: b"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'"),s("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[t._v("\\n")]),t._v("Shawn"),s("span",{pre:!0,attrs:{class:"token entity",title:"\\x00"}},[t._v("\\x00")]),s("span",{pre:!0,attrs:{class:"token entity",title:"\\xb4"}},[t._v("\\xb4")]),s("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[t._v("\\n")]),s("span",{pre:!0,attrs:{class:"token entity",title:"\\x00"}},[t._v("\\x00")]),s("span",{pre:!0,attrs:{class:"token entity",title:"\\x06"}},[t._v("\\x06")]),t._v("red'")]),t._v("\n")])])]),s("ol",{attrs:{start:"3"}},[s("li",[t._v("检查 Websocket 端收到主题为 "),s("code",[t._v("avro_user/Shawn")]),t._v(" 的消息:")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('{"favorite_color":"red","favorite_number":666,"name":"Shawn"}\n')])])]),s("h3",{attrs:{id:"自定义编解码举例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#自定义编解码举例"}},[t._v("#")]),t._v(" 自定义编解码举例")]),t._v(" "),s("h4",{attrs:{id:"规则需求-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#规则需求-3"}},[t._v("#")]),t._v(" 规则需求")]),t._v(" "),s("p",[t._v("设备发布一个任意的消息，验证自部署的编解码服务能正常工作。")]),t._v(" "),s("h4",{attrs:{id:"创建-schema-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建-schema-3"}},[t._v("#")]),t._v(" 创建 Schema")]),t._v(" "),s("p",[t._v("在 EMQ X 的 "),s("a",{attrs:{href:"http://127.0.0.1:18083/#/schemas/0?oper=create",target:"_blank",rel:"noopener noreferrer"}},[t._v("Dashboard"),s("OutboundLink")],1),t._v(" 界面，使用下面的参数创建一个 3rd-Party Schema:")]),t._v(" "),s("ol",[s("li",[t._v("名称：my_parser")]),t._v(" "),s("li",[t._v("编解码类型：3rd-party")]),t._v(" "),s("li",[t._v("第三方类型: HTTP")]),t._v(" "),s("li",[t._v("URL: http://127.0.0.1:9003/parser")]),t._v(" "),s("li",[t._v("编解码配置: xor")])]),t._v(" "),s("p",[t._v("其他配置保持默认。")]),t._v(" "),s("p",[t._v("上面第 5 项编解码配置是个可选项，是个字符串，内容跟编解码服务的业务相关。")]),t._v(" "),s("h4",{attrs:{id:"创建规则-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建规则-3"}},[t._v("#")]),t._v(" 创建规则")]),t._v(" "),s("p",[s("strong",[t._v("使用刚才创建好的 Schema 来编写规则 SQL 语句：")])]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v("\n  schema_encode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'my_parser'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" payload"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" encoded_data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  schema_decode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'my_parser'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" encoded_data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" decoded_data\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"t/#"')]),t._v("\n")])])]),s("p",[t._v("这个 SQL 语句首先对数据做了 Encode，然后又做了 Decode，目的在于验证编解码过程是否正确:")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("schema_encode")]),t._v(" 函数将 payload 字段的内容按照 'my_parser' 这个 Schema 来做编码，结果存储到 "),s("code",[t._v("encoded_data")]),t._v(" 这个变量里;")]),t._v(" "),s("li",[s("code",[t._v("schema_decode")]),t._v(" 函数将 payload 字段的内容按照 'my_parser' 这个 Schema 来做解码，结果存储到 "),s("code",[t._v("decoded_data")]),t._v(" 这个变量里;")])]),t._v(" "),s("p",[t._v("最终这个 SQL 语句的筛选结果是 "),s("code",[t._v("encoded_data")]),t._v(" 和 "),s("code",[t._v("decoded_data")]),t._v(" 这两个变量。")]),t._v(" "),s("p",[s("strong",[t._v("然后使用以下参数添加动作：")])]),t._v(" "),s("ul",[s("li",[t._v("动作类型：检查(调试)")])]),t._v(" "),s("p",[t._v("这个检查动作会把 SQL 语句筛选的结果打印到 emqx 控制台 (erlang shell) 里。")]),t._v(" "),s("p",[t._v('如果是使用 emqx console 启动的服务，打印会直接显示在控制台里；如果是使用 emqx start 启动的服务，打印会输出到日志目录下的 erlang.log.N 文件里，这里 "N" 为整数，比如 "erlang.log.1", "erlang.log.2"。')]),t._v(" "),s("h4",{attrs:{id:"编解码服务端代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#编解码服务端代码"}},[t._v("#")]),t._v(" 编解码服务端代码")]),t._v(" "),s("p",[t._v("规则创建好之后，就可以模拟数据进行测试了。所以首先需要编写一个自己的编解码服务。")]),t._v(" "),s("p",[t._v("下面的代码使用 Python 语言实现了一个 HTTP 编解码服务，为简单起见，这个服务提供两种简单的方式来进行编解码(加解密)，详见 "),s("a",{attrs:{href:"https://github.com/terry-xiaoyu/schema-registry-examples/blob/master/3rd_party/http_parser_server.py",target:"_blank",rel:"noopener noreferrer"}},[t._v("完整代码"),s("OutboundLink")],1),t._v(":")]),t._v(" "),s("ul",[s("li",[t._v("按位异或")]),t._v(" "),s("li",[t._v("字符替换")])]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("xor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v("\"\"\"\n  >>> xor(xor(b'abc'))\n  b'abc'\n  >>> xor(xor(b'!}~*'))\n  b'!}~*'\n  \"\"\"")]),t._v("\n  length "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("len")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  bdata "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bytearray")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  bsecret "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bytearray")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("secret "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bytearray")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" bdata"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),t._v(" bsecret"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bytes")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("subst")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dtype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v("\"\"\"\n  >>> subst('decode', b'abc', 3)\n  b'def'\n  >>> subst('decode', b'ab~', 1)\n  b'bc!'\n  >>> subst('encode', b'def', 3)\n  b'abc'\n  >>> subst('encode', b'bc!', 1)\n  b'ab~'\n  \"\"\"")]),t._v("\n  adata "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'B'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("len")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("adata"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" dtype "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'decode'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      adata"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" shift"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("adata"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("elif")]),t._v(" dtype "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'encode'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      adata"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" shift"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("adata"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bytes")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("adata"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("将这个服务运行起来:")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("$ pip3 "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" flask\n$ python3 http_parser_server.py\n * Serving Flask app "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http_parser_server"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lazy loading"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n * Environment: production\n   WARNING: This is a development server. Do not use it "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" a production deployment.\n   Use a production WSGI server instead.\n * Debug mode: off\n * Running on http://127.0.0.1:9003/ "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Press CTRL+C to quit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h4",{attrs:{id:"检查规则执行结果-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#检查规则执行结果-3"}},[t._v("#")]),t._v(" 检查规则执行结果")]),t._v(" "),s("p",[t._v("由于本示例比较简单，我们直接使用 MQTT Websocket 客户端来模拟设备端发一条消息。")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("在 Dashboard 的 "),s("a",{attrs:{href:"http://127.0.0.1:18083/#/websocket",target:"_blank",rel:"noopener noreferrer"}},[t._v("Websocket"),s("OutboundLink")],1),t._v(' 工具里，登录一个 MQTT Client 并发布一条消息到 "t/1"，内容为 "hello"。')])]),t._v(" "),s("li",[s("p",[t._v("检查 emqx 控制台 (erlang shell) 里的打印:")])])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("emqx@127.0.0.1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[s("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[t._v("1")]),t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("inspect"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        Selected Data: "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#{decoded_data => <<"hello">>,')]),t._v("\n                         encoded_data "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9,4")]),t._v(",13,13,1"),s("span",{pre:!0,attrs:{class:"token operator"}},[s("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[t._v("4")]),t._v(">>")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        Envs: "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#{event => 'message.publish',")]),t._v("\n                flags "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#{dup => false,retain => false},")]),t._v("\n                from "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"mqttjs_76e5a35b"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(",\n                headers "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n                    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#{allow_publish => true,")]),t._v("\n                      peername "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("127,0")]),t._v(",0,1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(",54753"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(",\n                      username "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(",\n                "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("id")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0,5")]),t._v(",146,30,146,38,123,81,244,66,0,0,62,117,0,"),s("span",{pre:!0,attrs:{class:"token operator"}},[s("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[t._v("1")]),t._v(">>")]),t._v(",\n                node "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'emqx@127.0.0.1'")]),t._v(",payload "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(",qos "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(",\n                timestamp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1568,34882")]),t._v(",222929"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(",\n                topic "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"t/1"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        Action Init Params: "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#{}")]),t._v("\n")])])]),s("p",[t._v("Select Data 是经过 SQL 语句筛选之后的数据，Envs 是规则引擎内部可用的环境变量，Action Init Params 是动作的初始化参数。这三个数据均为 "),s("code",[t._v("Map")]),t._v(" 格式。")]),t._v(" "),s("p",[t._v("Selected Data 里面的两个字段 "),s("code",[t._v("decoded_data")]),t._v(" 和 "),s("code",[t._v("encoded_data")]),t._v(" 对应 SELECT 语句里面的两个 AS。因为 "),s("code",[t._v("decoded_data")]),t._v(' 是编码然后再解码之后的结果，所以它又被还原为了我们发送的内容 "hello"，表明编解码插件工作正常。')])])}),[],!1,null,null,null);a.default=e.exports}}]);