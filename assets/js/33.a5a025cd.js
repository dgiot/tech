(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{623:function(e,a,t){"use strict";t.r(a);var r=t(9),s=Object(r.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("div",{staticClass:"language-auto extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("1> observer:start().\n......\nERROR: Could not find 'wxe_driver.so' in : /XXX/XXX/XXX\n")])])]),t("h4",{attrs:{id:"解决"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解决"}},[e._v("#")]),e._v(" "),t("strong",[e._v("解决：")])]),e._v(" "),t("h5",{attrs:{id:"_1-erlang官方工具支持连接远程节点-本地windows安装erlang环境-命令行下启动erlang-shell"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-erlang官方工具支持连接远程节点-本地windows安装erlang环境-命令行下启动erlang-shell"}},[e._v("#")]),e._v(" 1. erlang官方工具支持连接远程节点，本地windows安装erlang环境，命令行下启动erlang shell：")]),e._v(" "),t("div",{staticClass:"language-auto extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("\terl -name observer@local_ip -setcookie secret_cookie\n")])])]),t("p",[t("strong",[e._v("说明：")]),t("br"),e._v("\nlocal_ip为本地ip，secret_cookie为erlang分布式节点的配置的cookie。"),t("br"),e._v("\n此处我们启动了一个名为observer@local_ip的节点。")]),e._v(" "),t("h5",{attrs:{id:"_2-本地启动observer"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-本地启动observer"}},[e._v("#")]),e._v(" 2.本地启动observer")]),e._v(" "),t("div",{staticClass:"language-auto extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("\t(observer@127.0.0.1)1> observer:start().\n")])])]),t("h5",{attrs:{id:"_3-连接远程节点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-连接远程节点"}},[e._v("#")]),e._v(" 3.连接远程节点")]),e._v(" "),t("p",[e._v("启动observer之后，点击菜单栏的Nodes - Connect Node，输入远程节点的node name后可正常连接。")]),e._v(" "),t("h2",{attrs:{id:"etop"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#etop"}},[e._v("#")]),e._v(" Etop")]),e._v(" "),t("p",[e._v("类似top命令，查看erlang进程占用cpu、内存较高的进程")]),e._v(" "),t("p",[e._v("参数：")]),e._v(" "),t("p",[e._v("node        atom       erlang node"),t("br"),e._v("\n  port        integer    The used port"),t("br"),e._v("\n  accumulate  boolean    If true execution time is accumulated"),t("br"),e._v("\n  lines       integer    Number of displayed processes"),t("br"),e._v("\n  interval    integer    Display update interval in secs"),t("br"),e._v("\n  sort        runtime | reductions | memory | msg_q"),t("br"),e._v("\n  output      graphical | text"),t("br"),e._v("\n  tracing     on | off "),t("br"),e._v("\n  setcookie   string")]),e._v(" "),t("p",[e._v("使用举例：")]),e._v(" "),t("p",[e._v("1. 找出cpu占用最高的进程，图形界面输出，每10秒更新一次")]),e._v(" "),t("div",{staticClass:"language-plain extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("> spawn(fun() -> etop:start([{interval,10}, {sort, runtime}]) end).\n> etop:stop().\n")])])]),t("p",[e._v("2. 找出内存占用较高进程, 输出进程的数量为20，文本形式输出")]),e._v(" "),t("div",{staticClass:"language-plain extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("> spawn(fun() -> etop:start([{output, text}, {lines, 20},  {sort, memory}]) end).\n> etop:stop().\n")])])]),t("p",[e._v("3. 查看远程节点etop：")]),e._v(" "),t("div",{staticClass:"language-plain extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" > erl -name abc@192.168.17.102 -hidden -s etop -output text -sort memory -lines 20 -node 'test@192.168.17.102' -setcookie mycookie123\n")])])]),t("p",[e._v("或者：")]),e._v(" "),t("div",{staticClass:"language-plain extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("> erl -name abc@192.168.17.102 -hidden\n> etop:start([{node,'test@192.168.17.102'}, {setcookie, \"mycookie123\"}, {output, text}, {lines, 20},  {sort, memory}])\n")])])]),t("p",[e._v("rpc:call")]),e._v(" "),t("div",{staticClass:"language-plain extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("> erl -name abc@192.168.17.102 -setcookie mycookie123 \n> rpc:call('test@192.168.17.102', etop, start, [[{output, text}, {lines, 20},  {sort, memory}]]).\n")])])]),t("h2",{attrs:{id:"eprof"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#eprof"}},[e._v("#")]),e._v(" eprof")]),e._v(" "),t("p",[e._v("假设我们使用etop查到了cpu占用时间较多的进程id，那么可以使用eprof进行进一步的分析.")]),e._v(" "),t("p",[e._v("基本用法：")]),e._v(" "),t("div",{staticClass:"language-plain extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("> eprof:start().\n> eprof:profile([pid(x,x,x)]).\n> eprof:stop_profiling().\n> eprof:analyze().\n> eprof:stop().\n")])])]),t("p",[e._v("或：")]),e._v(" "),t("div",{staticClass:"language-plain extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("> eprof:start_profiling([regNames], {gen, call, 4}).\n> eprof:stop_profiling().\n> eprof:analyze().\n> eprof:stop().\n")])])]),t("p",[e._v("regNames可以填写进程的注册名, {gen, call, 4}表示只记录gen:call/4这个函数")]),e._v(" "),t("p",[e._v("analyze结果示例：")]),e._v(" "),t("div",{staticClass:"language-plain extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("****** Process <0.60.0>    -- 100.00 % of profiled time *** \nFUNCTION                 CALLS      %  TIME  [uS / CALLS]\n--------                 -----    ---  ----  [----------]\ngen:call/4                   2   0.00     0  [      0.00]\ngen:do_call/4                2   0.22     1  [      0.50]\ngen_server:call/2            2   0.44     2  [      1.00]\ndbutil:i_connect/1           2   0.66     3  [      1.50]\ngen:call/3                   2   0.66     3  [      1.50]\nresource_pool:get/1          2   0.66     3  [      1.50]\nmvar:modify/2                2   0.66     3  [      1.50]\ngen_server:decode_msg/8      4   0.88     4  [      1.00]\nerlang:monitor/2             2   0.88     4  [      2.00]\nerlang:demonitor/2           2   1.33     6  [      3.00]\ngen_server:handle_msg/5      4   1.55     7  [      1.75]\nmyserver:handle_call/3       4   1.77     8  [      2.00]\ngen_server:loop/6            4   1.99     9  [      2.25]\nerlang:send/3                2   3.76    17  [      8.50]\ngen_server:reply/2           4  84.51   382  [     95.50]\n")])])]),t("h2",{attrs:{id:"fprof"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#fprof"}},[e._v("#")]),e._v(" fprof")]),e._v(" "),t("p",[e._v("fprof类似eprof，但是会把详细信息存储到文件中，方便数据统计分析。")]),e._v(" "),t("p",[e._v("只看某一函数的简单调用方法：")]),e._v(" "),t("p",[e._v("1> fprof:apply(Module, fun, Args).\n2> fprof:profile().\n3> fprof:analyse().")]),e._v(" "),t("p",[e._v("实际上在执行的时候，fprof:apply/3前后会自动添加trace([start, ...]) 和 trace(stop).")]),e._v(" "),t("p",[e._v("完整的写法是：")]),e._v(" "),t("div",{staticClass:"language-plain extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('> fprof:trace([start, {file, "./fprof.trace"}, {procs, PidSpec}]).  %% 或者可以trace多个Pid，[PidSpec]\n> fprof:trace(stop).\n> fprof:profile({file, "./fprof.trace"}).\n> fprof:analyse([{dest, "fprof.analysis"},{sort,own}]).  %% 详细参数见： http://www.erlang.org/doc/man/fprof.html#analyse-2\n')])])]),t("p",[e._v("结果示例：")]),e._v(" "),t("div",{staticClass:"language-plain extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('1> fprof:apply(lists, reverse, ["abcdef"]).\n"fedcba"\n2> fprof:profile().\nReading trace data...\n\nEnd of trace!\nok\n3> fprof:analyse().\nProcessing data...\nCreating output...\n%% Analysis results:\n{  analysis_options,\n [{callers, true},\n  {sort, acc},\n  {totals, false},\n  {details, true}]}.\n\n%                                               CNT       ACC       OWN        \n[{ totals,                                        3,    0.027,    0.027}].  %%% CNT是trace过程中函数调用的总数,ACC是整个trace的时间,OWN为函数执行时间\n\n\n%                                               CNT       ACC       OWN        \n[{ "<0.33.0>",                                    3,undefined,    0.027}].   %%\n\n{[{undefined,                                     0,    0.027,    0.019}],     \n { {fprof,apply_start_stop,4},                    0,    0.027,    0.019},     %\n [{{lists,reverse,1},                             1,    0.008,    0.005},      \n  {suspend,                                       1,    0.000,    0.000}]}.    \n\n{[{{fprof,apply_start_stop,4},                    1,    0.008,    0.005}],     \n { {lists,reverse,1},                             1,    0.008,    0.005},     %\n [{{lists,reverse,2},                             1,    0.003,    0.003}]}.    \n\n{[{{lists,reverse,1},                             1,    0.003,    0.003}],     \n { {lists,reverse,2},                             1,    0.003,    0.003},     %\n [ ]}.\n\n{[ ],\n { undefined,                                     0,    0.000,    0.000},     %\n [{{fprof,apply_start_stop,4},                    0,    0.027,    0.019}]}.    \n\n{[{{fprof,apply_start_stop,4},                    1,    0.000,    0.000}],     \n { suspend,                                       1,    0.000,    0.000},     %\n [ ]}.\n\n\nDone!\nok\n')])])]),t("p",[e._v("%是一种标记，每一个“段落”中，%表示被调用的函数主体，%以上为调用它的函数，%以下为它调用的函数。“段落”中的CNT列表示被调用次数，Acc表示包括%之上的函数在内所花费的时间，own表示不包括%之上的函数所用的时间。")]),e._v(" "),t("p",[e._v("suspend表示进程挂起。")]),e._v(" "),t("p",[e._v("也可以将fprof这类工具卸载想监控的代码前后。")]),e._v(" "),t("h2",{attrs:{id:"cprof"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cprof"}},[e._v("#")]),e._v(" cprof")]),e._v(" "),t("p",[e._v("用于统计一个函数中的每个函数的调用次数。相较于eprof和fprof，cprof对性能影响很小，官方说大约10%")]),e._v(" "),t("p",[e._v("使用举例（引自官网）")]),e._v(" "),t("p",[e._v("1> cprof:start(),R=calendar:day_of_the_week(1896,4,27),cprof:pause(),R.\n1\n2> cprof:analyse(calendar).\n{calendar,9,\n[{{calendar,df,2},1},\n{{calendar,dm,1},1},\n{{calendar,dy,1},1},\n{{calendar,last_day_of_the_month1,2},1},\n{{calendar,last_day_of_the_month,2},1},\n{{calendar,is_leap_year1,1},1},\n{{calendar,is_leap_year,1},1},\n{{calendar,day_of_the_week,3},1},\n{{calendar,date_to_gregorian_days,3},1}]}\n3> cprof:stop().\n3271")]),e._v(" "),t("p",[e._v("该示例表明day_of_the_week这个函数需要调用9个函数完成计算。")]),e._v(" "),t("p",[e._v("同样cprof可以嵌入代码中。")]),e._v(" "),t("h2",{attrs:{id:"webtool"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#webtool"}},[e._v("#")]),e._v(" Webtool")]),e._v(" "),t("p",[e._v("webtool:start().  %% 默认端口8888, http://localhost:8888/")]),e._v(" "),t("p",[e._v("appmon:start(). %% 查看application树")]),e._v(" "),t("p",[e._v("pman:start().  %%监控进程")]),e._v(" "),t("p",[e._v("tv:start().  %% ets & mnesia")]),e._v(" "),t("p",[e._v("toolbar:start().  %% 包含了上面几个")])])}),[],!1,null,null,null);a.default=s.exports}}]);